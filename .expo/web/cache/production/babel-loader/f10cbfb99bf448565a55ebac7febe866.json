{"ast":null,"code":"function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}import*as React from'react';import Text from\"react-native-web/dist/exports/Text\";import View from\"react-native-web/dist/exports/View\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import{useTheme}from'@react-navigation/native';import Color from'color';import TouchableItem from\"./TouchableItem\";export default function DrawerItem(props){var _useTheme=useTheme(),colors=_useTheme.colors;var icon=props.icon,label=props.label,labelStyle=props.labelStyle,_props$focused=props.focused,focused=_props$focused===void 0?false:_props$focused,_props$activeTintColo=props.activeTintColor,activeTintColor=_props$activeTintColo===void 0?colors.primary:_props$activeTintColo,_props$inactiveTintCo=props.inactiveTintColor,inactiveTintColor=_props$inactiveTintCo===void 0?Color(colors.text).alpha(0.68).rgb().string():_props$inactiveTintCo,_props$activeBackgrou=props.activeBackgroundColor,activeBackgroundColor=_props$activeBackgrou===void 0?Color(activeTintColor).alpha(0.12).rgb().string():_props$activeBackgrou,_props$inactiveBackgr=props.inactiveBackgroundColor,inactiveBackgroundColor=_props$inactiveBackgr===void 0?'transparent':_props$inactiveBackgr,style=props.style,onPress=props.onPress,rest=_objectWithoutProperties(props,[\"icon\",\"label\",\"labelStyle\",\"focused\",\"activeTintColor\",\"inactiveTintColor\",\"activeBackgroundColor\",\"inactiveBackgroundColor\",\"style\",\"onPress\"]);var _StyleSheet$flatten=StyleSheet.flatten(style||{}),_StyleSheet$flatten$b=_StyleSheet$flatten.borderRadius,borderRadius=_StyleSheet$flatten$b===void 0?4:_StyleSheet$flatten$b;var color=focused?activeTintColor:inactiveTintColor;var backgroundColor=focused?activeBackgroundColor:inactiveBackgroundColor;var iconNode=icon?icon({size:24,focused:focused,color:color}):null;return React.createElement(View,_extends({collapsable:false},rest,{style:[styles.container,{borderRadius:borderRadius,backgroundColor:backgroundColor},style]}),React.createElement(TouchableItem,{delayPressIn:0,onPress:onPress,style:[styles.wrapper,{borderRadius:borderRadius}],accessibilityTraits:focused?['button','selected']:'button',accessibilityComponentType:\"button\",accessibilityRole:\"button\",accessibilityStates:focused?['selected']:[]},React.createElement(React.Fragment,null,iconNode,React.createElement(View,{style:[styles.label,{marginLeft:iconNode?32:0,marginVertical:5}]},typeof label==='string'?React.createElement(Text,{numberOfLines:1,style:[{color:color,fontWeight:'500'},labelStyle]},label):label({color:color,focused:focused})))));}var styles=StyleSheet.create({container:{marginHorizontal:10,marginVertical:4,overflow:'hidden'},wrapper:{flexDirection:'row',alignItems:'center',padding:8},label:{marginRight:32}});","map":{"version":3,"sources":["DrawerItem.tsx"],"names":["colors","useTheme","focused","activeTintColor","inactiveTintColor","Color","activeBackgroundColor","inactiveBackgroundColor","onPress","borderRadius","StyleSheet","style","color","backgroundColor","iconNode","icon","size","styles","marginLeft","marginVertical","fontWeight","label","container","marginHorizontal","overflow","wrapper","flexDirection","alignItems","padding","marginRight"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Text,\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\nimport { useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport TouchableItem from './TouchableItem';\n\ntype Props = {\n  /**\n   * The label text of the item.\n   */\n  label:\n    | string\n    | ((props: { focused: boolean; color: string }) => React.ReactNode);\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  focused?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress: () => void;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n */\nexport default function DrawerItem(props: Props) {\n  const { colors } = useTheme();\n\n  const {\n    icon,\n    label,\n    labelStyle,\n    focused = false,\n    activeTintColor = colors.primary,\n    inactiveTintColor = Color(colors.text).alpha(0.68).rgb().string(),\n    activeBackgroundColor = Color(activeTintColor).alpha(0.12).rgb().string(),\n    inactiveBackgroundColor = 'transparent',\n    style,\n    onPress,\n    ...rest\n  } = props;\n\n  const { borderRadius = 4 } = StyleSheet.flatten(style || {});\n  const color = focused ? activeTintColor : inactiveTintColor;\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  const iconNode = icon ? icon({ size: 24, focused, color }) : null;\n\n  return (\n    <View\n      collapsable={false}\n      {...rest}\n      style={[styles.container, { borderRadius, backgroundColor }, style]}\n    >\n      <TouchableItem\n        delayPressIn={0}\n        onPress={onPress}\n        style={[styles.wrapper, { borderRadius }]}\n        accessibilityTraits={focused ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityStates={focused ? ['selected'] : []}\n      >\n        <React.Fragment>\n          {iconNode}\n          <View\n            style={[\n              styles.label,\n              { marginLeft: iconNode ? 32 : 0, marginVertical: 5 },\n            ]}\n          >\n            {typeof label === 'string' ? (\n              <Text\n                numberOfLines={1}\n                style={[\n                  {\n                    color,\n                    fontWeight: '500',\n                  },\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n            ) : (\n              label({ color, focused })\n            )}\n          </View>\n        </React.Fragment>\n      </TouchableItem>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden',\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}