{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _createSuper(Derived){return function(){var Super=_getPrototypeOf(Derived),result;if(_isNativeReflectConstruct()){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}import React from'react';import View from\"react-native-web/dist/exports/View\";import ScrollView from\"react-native-web/dist/exports/ScrollView\";import MowContainer from\"../../components/ui/Core/Container/MowContainer\";import MowListItem from\"../../components/ui/Common/ListItem/MowListItem\";import MowCheckListItem from\"../../components/ui/Common/ListItem/MowCheckListItem\";import{BodySize,Brands,Categories,Colors,RatingScore}from\"../../sampleData/FilterData\";import{MowModal}from\"../../components/ui/Common/Modal/MowModal\";import{MowInput}from\"../../components/ui/Common/Input/MowInput\";import{gPadding}from\"../../values/Styles/MowStyles\";import{MowButtonBasic}from\"../../components/ui/Common/Button/MowButton\";import{heightPercentageToDP as hp}from'react-native-responsive-screen';import MowCheckStarListItem from\"../../components/ui/Common/ListItem/MowCheckStarListItem\";import MowCheckColorListItem from\"../../components/ui/Common/ListItem/MowCheckColorListItem\";import{mowColors}from\"../../values/Colors/MowColors\";import PriceRangeData from\"../../sampleData/PriceRangeData\";var Filter=function(_React$Component){_inherits(Filter,_React$Component);var _super=_createSuper(Filter);function Filter(){var _this;_classCallCheck(this,Filter);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={categories:Categories,categoryModalVisible:false,categorySelected:'',categorySelectedItems:[],brands:Brands,brandsModalVisible:false,brandsSelected:'',brandsSelectedItems:[],priceRange:PriceRangeData,priceRangeModalVisible:false,priceRangeSelected:'',priceRangeSelectedItems:[],colorModalVisible:false,colors:Colors,colorSelected:'',colorSelectedItems:[],bodySizeModalVisible:false,bodySize:BodySize,bodySizeSelected:'',bodySizeSelectedItems:[],ratingScoreModalVisible:false,ratingScoreSelected:'',ratingScoreSelectedItems:[],ratingScore:RatingScore,startPrice:'',endPrice:''};_this.modalView={container:{backgroundColor:mowColors.viewBGColor,flex:1},listTitle:{color:mowColors.titleTextColor},listSubTitle:{color:mowColors.textColor},button:{backgroundColor:mowColors.mainColor}};_this.onChangeText=function(key,value){_this.setState(_defineProperty({},key,value));};_this._setSelectedItems=function(key,value){_this.setState(_defineProperty({},key,value));};_this._categoryCallback=function(data,flag){var arr=_this.state.categorySelectedItems;_this._handleArrayOperations(arr,'categorySelectedItems',flag,data);};_this._brandCallback=function(data,flag){var arr=_this.state.brandsSelectedItems;_this._handleArrayOperations(arr,'brandsSelectedItems',flag,data);};_this._priceRangeCallback=function(data,flag){var arr=_this.state.priceRangeSelectedItems;_this._handleArrayOperations(arr,'priceRangeSelectedItems',flag,data);};_this._colorCallback=function(data,flag){var arr=_this.state.colorSelectedItems;_this._handleArrayOperations(arr,'colorSelectedItems',flag,data);};_this._bodySizeCallback=function(data,flag){var arr=_this.state.bodySizeSelectedItems;_this._handleArrayOperations(arr,'bodySizeSelectedItems',flag,data);};_this._ratingScoreCallback=function(data,flag){var arr=_this.state.ratingScoreSelectedItems;_this._handleArrayOperations(arr,'ratingScoreSelectedItems',flag,data);};return _this;}_createClass(Filter,[{key:\"_handleArrayOperations\",value:function _handleArrayOperations(arr,key,flag,data){if(flag){arr.push(data);}else{if(arr){arr.splice(arr.indexOf(data),1);}}this._setSelectedItems(key,arr);}},{key:\"_arrayToString\",value:function _arrayToString(arr,key){var title='';for(var i in arr){if(i){title+=arr[i].title+', ';}}this.setState(_defineProperty({},key,title));}},{key:\"_checkSelected\",value:function _checkSelected(data,id){var arr=[];for(var i in data){var row=data[i];arr.push(row.id);}return arr.indexOf(id)!==-1;}},{key:\"render\",value:function render(){var _this2=this;return React.createElement(MowContainer,{navigation:this.props.navigation,style:{backgroundColor:mowColors.viewBGColor},title:\"Filter\"},React.createElement(View,{style:{flex:1}},React.createElement(ScrollView,null,React.createElement(MowListItem,{border:true,style:listItemStyle.container,subtitleTextStyle:listItemStyle.subtitle,title:\"Category\",subtitle:this.state.categorySelected,onPress:function onPress(){_this2.setState({categoryModalVisible:true});}}),React.createElement(MowListItem,{border:true,style:listItemStyle.container,subtitleTextStyle:listItemStyle.subtitle,title:\"Brand\",subtitle:this.state.brandsSelected,onPress:function onPress(){_this2.setState({brandsModalVisible:true});}}),React.createElement(MowListItem,{border:true,style:listItemStyle.container,subtitleTextStyle:listItemStyle.subtitle,title:\"Price Range\",subtitle:this.state.priceRangeSelected,onPress:function onPress(){_this2.setState({priceRangeModalVisible:true});}}),React.createElement(MowListItem,{border:true,style:listItemStyle.container,subtitleTextStyle:listItemStyle.subtitle,title:\"Color\",subtitle:this.state.colorSelected,onPress:function onPress(){_this2.setState({colorModalVisible:true});}}),React.createElement(MowListItem,{border:true,style:listItemStyle.container,subtitleTextStyle:listItemStyle.subtitle,title:\"Body Size\",subtitle:this.state.bodySizeSelected,onPress:function onPress(){_this2.setState({bodySizeModalVisible:true});}}),React.createElement(MowListItem,{border:true,style:listItemStyle.container,subtitleTextStyle:listItemStyle.subtitle,title:\"Rating\",subtitle:this.state.ratingScoreSelected,onPress:function onPress(){_this2.setState({ratingScoreModalVisible:true});}})),React.createElement(MowModal,{title:\"Category\",onClosed:function onClosed(){_this2.setState({categoryModalVisible:false});},modalVisible:this.state.categoryModalVisible},React.createElement(View,{style:this.modalView.container},this.state.categories.map(function(value,index){return React.createElement(MowCheckListItem,{selected:_this2._checkSelected(_this2.state.categorySelectedItems,value.id),key:index,item:value,titleTextStyle:_this2.modalView.listTitle,subtitleTextStyle:_this2.modalView.listSubTitle,title:value.title,onPress:_this2._categoryCallback});}),React.createElement(View,{style:{position:'absolute',bottom:20,width:'90%',alignSelf:'center'}},React.createElement(MowButtonBasic,{onPress:function onPress(){_this2._arrayToString(_this2.state.categorySelectedItems,'categorySelected');_this2.setState({categoryModalVisible:false});},stickyIcon:true,leftIcon:'check',containerStyle:this.modalView.button,type:'success'},\"Apply\")))),React.createElement(MowModal,{title:\"Brand\",onClosed:function onClosed(){_this2.setState({brandsModalVisible:false});},modalVisible:this.state.brandsModalVisible},React.createElement(View,{style:this.modalView.container},this.state.brands.map(function(value,index){return React.createElement(MowCheckListItem,{selected:_this2._checkSelected(_this2.state.brandsSelectedItems,value.id),titleTextStyle:_this2.modalView.listTitle,subtitleTextStyle:_this2.modalView.listSubTitle,key:index,item:value,title:value.title,onPress:_this2._brandCallback});}),React.createElement(View,{style:{position:'absolute',bottom:20,width:'90%',alignSelf:'center'}},React.createElement(MowButtonBasic,{onPress:function onPress(){_this2._arrayToString(_this2.state.brandsSelectedItems,'brandsSelected');_this2.setState({brandsModalVisible:false});},containerStyle:this.modalView.button,stickyIcon:true,leftIcon:'check',type:'success'},\"Apply\")))),React.createElement(MowModal,{title:\"Price Range\",onClosed:function onClosed(){_this2.setState({priceRangeModalVisible:false});},modalVisible:this.state.priceRangeModalVisible},React.createElement(View,{style:_objectSpread({padding:gPadding},this.modalView.container)},React.createElement(View,{style:{flexDirection:'row'}},React.createElement(MowInput,{containerStyle:{flex:1,marginRight:5},type:'number',value:this.state.startPrice,onChangeText:function onChangeText(value){return _this2.onChangeText('startPrice',value);},placeholder:\"Start Price\"}),React.createElement(MowInput,{containerStyle:{flex:1,marginLeft:5},type:'number',value:this.state.endPrice,onChangeText:function onChangeText(value){return _this2.onChangeText('endPrice',value);},placeholder:\"End Price\"})),this.state.priceRange.map(function(value,index){return React.createElement(MowCheckListItem,{style:{marginHorizontal:0},selected:_this2._checkSelected(_this2.state.priceRangeSelectedItems,value.id),key:index,item:value,title:value.title,titleTextStyle:_this2.modalView.listTitle,subtitleTextStyle:_this2.modalView.listSubTitle,onPress:_this2._priceRangeCallback});}),React.createElement(View,{style:{position:'absolute',bottom:20,width:'90%',alignSelf:'center'}},React.createElement(MowButtonBasic,{onPress:function onPress(){_this2._arrayToString(_this2.state.priceRangeSelectedItems,'priceRangeSelected');_this2.setState({priceRangeModalVisible:false});},stickyIcon:true,containerStyle:this.modalView.button,leftIcon:'check',type:'success'},\"Apply\")))),React.createElement(MowModal,{title:\"Color\",onClosed:function onClosed(){_this2.setState({colorModalVisible:false});},modalVisible:this.state.colorModalVisible},React.createElement(View,{style:this.modalView.container},this.state.colors.map(function(value,index){return React.createElement(MowCheckColorListItem,{selected:_this2._checkSelected(_this2.state.colorSelectedItems,value.id),key:index,item:value,titleTextStyle:_this2.modalView.listTitle,subtitleTextStyle:_this2.modalView.listSubTitle,color:value.color,onPress:_this2._colorCallback});}),React.createElement(View,{style:{position:'absolute',bottom:20,width:'90%',alignSelf:'center'}},React.createElement(MowButtonBasic,{onPress:function onPress(){_this2._arrayToString(_this2.state.colorSelectedItems,'colorSelected');_this2.setState({colorModalVisible:false});},stickyIcon:true,leftIcon:'check',containerStyle:this.modalView.button,type:'success'},\"Apply\")))),React.createElement(MowModal,{title:\"Body SIze\",onClosed:function onClosed(){_this2.setState({bodySizeModalVisible:false});},modalVisible:this.state.bodySizeModalVisible},React.createElement(View,{style:this.modalView.container},this.state.bodySize.map(function(value,index){return React.createElement(MowCheckListItem,{selected:_this2._checkSelected(_this2.state.bodySizeSelectedItems,value.id),key:index,item:value,titleTextStyle:_this2.modalView.listTitle,subtitleTextStyle:_this2.modalView.listSubTitle,title:value.title,onPress:_this2._bodySizeCallback});}),React.createElement(View,{style:{position:'absolute',bottom:20,width:'90%',alignSelf:'center'}},React.createElement(MowButtonBasic,{onPress:function onPress(){_this2._arrayToString(_this2.state.bodySizeSelectedItems,'bodySizeSelected');_this2.setState({bodySizeModalVisible:false});},stickyIcon:true,containerStyle:this.modalView.button,leftIcon:'check',type:'success'},\"Apply\")))),React.createElement(MowModal,{title:\"Rating\",onClosed:function onClosed(){_this2.setState({ratingScoreModalVisible:false});},modalVisible:this.state.ratingScoreModalVisible},React.createElement(View,{style:this.modalView.container},this.state.ratingScore.map(function(value,index){return React.createElement(MowCheckStarListItem,{score:value.title,selected:_this2._checkSelected(_this2.state.ratingScoreSelectedItems,value.id),key:index,titleTextStyle:_this2.modalView.listTitle,subtitleTextStyle:_this2.modalView.listSubTitle,item:value,onPress:_this2._ratingScoreCallback});}),React.createElement(View,{style:{position:'absolute',bottom:20,width:'90%',alignSelf:'center'}},React.createElement(MowButtonBasic,{onPress:function onPress(){_this2._arrayToString(_this2.state.ratingScoreSelectedItems,'ratingScoreSelected');_this2.setState({ratingScoreModalVisible:false});},containerStyle:this.modalView.button,stickyIcon:true,leftIcon:'check',type:'success'},\"Apply\"))))),React.createElement(View,{style:_objectSpread({},{position:'absolute',bottom:20,width:'90%',alignSelf:'center'},{bottom:0})},React.createElement(MowButtonBasic,{onPress:function onPress(){_this2.props.navigation.navigate('ProductList');},stickyIcon:true,containerStyle:{backgroundColor:mowColors.mainColor},leftIcon:'check',type:'success'},\"Apply\")));}}]);return Filter;}(React.Component);export{Filter as default};var listItemStyle={container:{marginVertical:5,marginHorizontal:10,height:hp(8)},subtitle:{color:mowColors.mainColor}};var modalStyle={buttonView:{position:'absolute',bottom:20,width:'90%',alignSelf:'center'}};","map":{"version":3,"sources":["/home/aunto/Projects/WCL/wcl-app/src/scenes/product/productFilter.component.tsx"],"names":["heightPercentageToDP","Filter","React","state","categories","categoryModalVisible","categorySelected","categorySelectedItems","brands","brandsModalVisible","brandsSelected","brandsSelectedItems","priceRange","priceRangeModalVisible","priceRangeSelected","priceRangeSelectedItems","colorModalVisible","colors","colorSelected","colorSelectedItems","bodySizeModalVisible","bodySize","bodySizeSelected","bodySizeSelectedItems","ratingScoreModalVisible","ratingScoreSelected","ratingScoreSelectedItems","ratingScore","startPrice","endPrice","modalView","container","backgroundColor","mowColors","flex","listTitle","color","listSubTitle","button","onChangeText","_setSelectedItems","_categoryCallback","arr","_brandCallback","_priceRangeCallback","_colorCallback","_bodySizeCallback","_ratingScoreCallback","key","flag","data","title","id","row","listItemStyle","value","position","bottom","width","alignSelf","padding","flexDirection","marginRight","marginLeft","marginHorizontal","marginVertical","height","hp","subtitle","modalStyle","buttonView"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, ScrollView } from 'react-native';\nimport MowContainer from '../../components/ui/Core/Container/MowContainer';\nimport MowListItem from '../../components/ui/Common/ListItem/MowListItem';\nimport MowCheckListItem from '../../components/ui/Common/ListItem/MowCheckListItem';\nimport { BodySize, Brands, Categories, Colors, RatingScore } from '../../sampleData/FilterData';\nimport { MowModal } from '../../components/ui/Common/Modal/MowModal';\nimport { MowInput } from '../../components/ui/Common/Input/MowInput';\nimport { gPadding } from '../../values/Styles/MowStyles';\n// import {mowStrings} from '../../values/Strings/MowStrings';\nimport { MowButtonBasic } from '../../components/ui/Common/Button/MowButton';\nimport { heightPercentageToDP as hp } from 'react-native-responsive-screen';\nimport MowCheckStarListItem from '../../components/ui/Common/ListItem/MowCheckStarListItem';\nimport MowCheckColorListItem from '../../components/ui/Common/ListItem/MowCheckColorListItem';\nimport { mowColors } from '../../values/Colors/MowColors';\nimport PriceRangeData from '../../sampleData/PriceRangeData';\n\ninterface IProps {\n    navigation: any;\n}\n\nexport default class Filter extends React.Component<IProps, {}> {\n\n    // to initialize filter data\n    state = {\n        categories: Categories,\n        categoryModalVisible: false,\n        categorySelected: '',\n        categorySelectedItems: [],\n        brands: Brands,\n        brandsModalVisible: false,\n        brandsSelected: '',\n        brandsSelectedItems: [],\n        priceRange: PriceRangeData,\n        priceRangeModalVisible: false,\n        priceRangeSelected: '',\n        priceRangeSelectedItems: [],\n        colorModalVisible: false,\n        colors: Colors,\n        colorSelected: '',\n        colorSelectedItems: [],\n        bodySizeModalVisible: false,\n        bodySize: BodySize,\n        bodySizeSelected: '',\n        bodySizeSelectedItems: [],\n        ratingScoreModalVisible: false,\n        ratingScoreSelected: '',\n        ratingScoreSelectedItems: [],\n        ratingScore: RatingScore,\n        startPrice: '',\n        endPrice: '',\n    };\n\n    modalView = {\n        container: {\n            backgroundColor: mowColors.viewBGColor,\n            flex: 1,\n        },\n        listTitle: {\n            color: mowColors.titleTextColor,\n        },\n        listSubTitle: {\n            color: mowColors.textColor,\n        },\n        button: {\n            backgroundColor: mowColors.mainColor,\n        },\n    };\n\n    // to store user input\n    onChangeText = (key, value) => {\n        this.setState({\n            [key]: value,\n        });\n    };\n\n    _setSelectedItems = (key, value) => {\n        this.setState({\n            [key]: value,\n        });\n    };\n\n    // if flag -> item selected, else -> item unselected\n    _categoryCallback = (data, flag) => {\n        const arr = this.state.categorySelectedItems;\n        this._handleArrayOperations(arr, 'categorySelectedItems', flag, data);\n    };\n\n    // if flag -> item selected, else -> item unselected\n    _brandCallback = (data, flag) => {\n        const arr = this.state.brandsSelectedItems;\n        this._handleArrayOperations(arr, 'brandsSelectedItems', flag, data);\n    };\n\n    // if flag -> item selected, else -> item unselected\n    _priceRangeCallback = (data, flag) => {\n        const arr = this.state.priceRangeSelectedItems;\n        this._handleArrayOperations(arr, 'priceRangeSelectedItems', flag, data);\n    };\n\n    // if flag -> item selected, else -> item unselected\n    _colorCallback = (data, flag) => {\n        const arr = this.state.colorSelectedItems;\n        this._handleArrayOperations(arr, 'colorSelectedItems', flag, data);\n    };\n\n    // if flag -> item selected, else -> item unselected\n    _bodySizeCallback = (data, flag) => {\n        const arr = this.state.bodySizeSelectedItems;\n        this._handleArrayOperations(arr, 'bodySizeSelectedItems', flag, data);\n    };\n\n    // if flag -> item selected, else -> item unselected\n    _ratingScoreCallback = (data, flag) => {\n        const arr = this.state.ratingScoreSelectedItems;\n        this._handleArrayOperations(arr, 'ratingScoreSelectedItems', flag, data);\n    };\n\n    _handleArrayOperations(arr, key, flag, data) {\n\n        if (flag) {\n            arr.push(data);\n        } else {\n            if (arr) {\n                // to remove item when unselected from array\n                arr.splice(arr.indexOf(data), 1);\n            }\n        }\n\n        this._setSelectedItems(key, arr);\n    }\n\n    // to get all selection and sum in one string value to show user what selected\n    _arrayToString(arr, key) {\n        let title = '';\n\n        for (const i in arr) {\n            if (i) {\n                title += arr[i].title + ', ';\n            }\n        }\n\n        this.setState({ [key]: title });\n    }\n\n    // to control user selection, data is selected or not by user\n    _checkSelected(data, id) {\n        const arr = [];\n\n        for (const i in data) {\n            const row = data[i];\n            arr.push(row.id);\n        }\n\n        return arr.indexOf(id) !== -1;\n    }\n\n    render() {\n\n        return (\n\n            <MowContainer\n                navigation={this.props.navigation}\n                style={{ backgroundColor: mowColors.viewBGColor }}\n                title='Filter'>\n\n                <View\n                    style={{ flex: 1 }}>\n\n                    {/* category item list */}\n                    <ScrollView>\n\n                        {/* category item */}\n                        <MowListItem\n                            border={true}\n                            style={listItemStyle.container}\n                            subtitleTextStyle={listItemStyle.subtitle}\n                            title='Category'\n                            subtitle={this.state.categorySelected}\n                            onPress={() => { this.setState({ categoryModalVisible: true }); }} />\n\n                        {/* brands item */}\n                        <MowListItem\n                            border={true}\n                            style={listItemStyle.container}\n                            subtitleTextStyle={listItemStyle.subtitle}\n                            title='Brand'\n                            subtitle={this.state.brandsSelected}\n                            onPress={() => { this.setState({ brandsModalVisible: true }); }} />\n\n                        {/* price range item */}\n                        <MowListItem\n                            border={true}\n                            style={listItemStyle.container}\n                            subtitleTextStyle={listItemStyle.subtitle}\n                            title='Price Range'\n                            subtitle={this.state.priceRangeSelected}\n                            onPress={() => { this.setState({ priceRangeModalVisible: true }); }} />\n\n                        {/* color item */}\n                        <MowListItem\n                            border={true}\n                            style={listItemStyle.container}\n                            subtitleTextStyle={listItemStyle.subtitle}\n                            title='Color'\n                            subtitle={this.state.colorSelected}\n                            onPress={() => { this.setState({ colorModalVisible: true }); }} />\n\n                        {/* body size item */}\n                        <MowListItem\n                            border={true}\n                            style={listItemStyle.container}\n                            subtitleTextStyle={listItemStyle.subtitle}\n                            title='Body Size'\n                            subtitle={this.state.bodySizeSelected}\n                            onPress={() => { this.setState({ bodySizeModalVisible: true }); }} />\n\n                        {/* rating score item */}\n                        <MowListItem\n                            border={true}\n                            style={listItemStyle.container}\n                            subtitleTextStyle={listItemStyle.subtitle}\n                            title='Rating'\n                            subtitle={this.state.ratingScoreSelected}\n                            onPress={() => { this.setState({ ratingScoreModalVisible: true }); }} />\n\n                    </ScrollView>\n\n                    {/* category modal */}\n                    <MowModal\n                        title='Category'\n                        onClosed={() => { this.setState({ categoryModalVisible: false }); }}\n                        modalVisible={this.state.categoryModalVisible}>\n\n                        <View\n                            style={this.modalView.container}>\n\n                            {\n                                this.state.categories.map((value, index) => {\n\n                                    return (\n                                        <MowCheckListItem\n                                            selected={this._checkSelected(this.state.categorySelectedItems, value.id)}\n                                            key={index}\n                                            item={value}\n                                            titleTextStyle={this.modalView.listTitle}\n                                            subtitleTextStyle={this.modalView.listSubTitle}\n                                            title={value.title}\n                                            onPress={this._categoryCallback} />\n                                    );\n                                })\n                            }\n\n                            {/* button view */}\n                            <View\n                                style={{\n                                    position: 'absolute',\n                                    bottom: 20,\n                                    width: '90%',\n                                    alignSelf: 'center',\n                                }}>\n\n                                {/* apply button */}\n                                <MowButtonBasic\n                                    onPress={() => {\n                                        this._arrayToString(this.state.categorySelectedItems, 'categorySelected');\n                                        this.setState({ categoryModalVisible: false });\n                                    }}\n                                    stickyIcon={true}\n                                    leftIcon={'check'}\n                                    containerStyle={this.modalView.button}\n                                    type={'success'}>\n\n                                    Apply\n\n                                </MowButtonBasic>\n\n                            </View>\n\n                        </View>\n\n                    </MowModal>\n\n                    {/* brand modal */}\n                    <MowModal\n                        title='Brand'\n                        onClosed={() => { this.setState({ brandsModalVisible: false }); }}\n                        modalVisible={this.state.brandsModalVisible}>\n\n                        <View\n                            style={this.modalView.container}>\n\n                            {\n                                this.state.brands.map((value, index) => {\n\n                                    return (\n                                        <MowCheckListItem\n                                            selected={this._checkSelected(this.state.brandsSelectedItems, value.id)}\n                                            titleTextStyle={this.modalView.listTitle}\n                                            subtitleTextStyle={this.modalView.listSubTitle}\n                                            key={index}\n                                            item={value}\n                                            title={value.title}\n                                            onPress={this._brandCallback} />\n                                    );\n                                })\n                            }\n\n                            {/* button view */}\n                            <View\n                                style={{\n                                    position: 'absolute',\n                                    bottom: 20,\n                                    width: '90%',\n                                    alignSelf: 'center',\n                                }}>\n\n                                {/* apply button */}\n                                <MowButtonBasic\n                                    onPress={() => {\n                                        this._arrayToString(this.state.brandsSelectedItems, 'brandsSelected');\n                                        this.setState({ brandsModalVisible: false });\n                                    }}\n                                    containerStyle={this.modalView.button}\n                                    stickyIcon={true}\n                                    leftIcon={'check'}\n                                    type={'success'}>\n\n                                    Apply\n\n                                </MowButtonBasic>\n\n                            </View>\n\n                        </View>\n\n                    </MowModal>\n\n                    {/* price range modal */}\n                    <MowModal\n                        title='Price Range'\n                        onClosed={() => { this.setState({ priceRangeModalVisible: false }); }}\n                        modalVisible={this.state.priceRangeModalVisible}>\n\n                        <View\n                            style={{ padding: gPadding, ...this.modalView.container }}>\n\n                            <View\n                                style={{ flexDirection: 'row' }}>\n\n                                <MowInput\n                                    containerStyle={{ flex: 1, marginRight: 5 }}\n                                    type={'number'}\n                                    value={this.state.startPrice}\n                                    onChangeText={value => this.onChangeText('startPrice', value)}\n                                    placeholder='Start Price' />\n\n                                <MowInput\n                                    containerStyle={{ flex: 1, marginLeft: 5 }}\n                                    type={'number'}\n                                    value={this.state.endPrice}\n                                    onChangeText={value => this.onChangeText('endPrice', value)}\n                                    placeholder='End Price' />\n\n                            </View>\n\n                            {\n                                this.state.priceRange.map((value, index) => {\n\n                                    return (\n                                        <MowCheckListItem\n                                            style={{ marginHorizontal: 0 }}\n                                            selected={this._checkSelected(this.state.priceRangeSelectedItems, value.id)}\n                                            key={index}\n                                            item={value}\n                                            title={value.title}\n                                            titleTextStyle={this.modalView.listTitle}\n                                            subtitleTextStyle={this.modalView.listSubTitle}\n                                            onPress={this._priceRangeCallback} />\n                                    );\n                                })\n                            }\n\n                            {/* button view */}\n                            <View\n                                style={{\n                                    position: 'absolute',\n                                    bottom: 20,\n                                    width: '90%',\n                                    alignSelf: 'center',\n                                }}>\n\n                                {/* apply button */}\n                                <MowButtonBasic\n                                    onPress={() => {\n                                        this._arrayToString(this.state.priceRangeSelectedItems, 'priceRangeSelected');\n                                        this.setState({ priceRangeModalVisible: false });\n                                    }}\n                                    stickyIcon={true}\n                                    containerStyle={this.modalView.button}\n                                    leftIcon={'check'}\n                                    type={'success'}>\n\n                                    Apply\n\n                                </MowButtonBasic>\n\n                            </View>\n\n                        </View>\n\n                    </MowModal>\n\n                    {/* color modal */}\n                    <MowModal\n                        title='Color'\n                        onClosed={() => { this.setState({ colorModalVisible: false }); }}\n                        modalVisible={this.state.colorModalVisible}>\n\n                        <View\n                            style={this.modalView.container}>\n\n                            {\n                                this.state.colors.map((value, index) => {\n\n                                    return (\n                                        <MowCheckColorListItem\n                                            selected={this._checkSelected(this.state.colorSelectedItems, value.id)}\n                                            key={index}\n                                            item={value}\n                                            titleTextStyle={this.modalView.listTitle}\n                                            subtitleTextStyle={this.modalView.listSubTitle}\n                                            color={value.color}\n                                            onPress={this._colorCallback} />\n                                    );\n                                })\n                            }\n\n                            {/* button view */}\n                            <View\n                                style={{\n                                    position: 'absolute',\n                                    bottom: 20,\n                                    width: '90%',\n                                    alignSelf: 'center',\n                                }}>\n\n                                {/* apply button */}\n                                <MowButtonBasic\n                                    onPress={() => {\n                                        this._arrayToString(this.state.colorSelectedItems, 'colorSelected');\n                                        this.setState({ colorModalVisible: false });\n                                    }}\n                                    stickyIcon={true}\n                                    leftIcon={'check'}\n                                    containerStyle={this.modalView.button}\n                                    type={'success'}>\n\n                                    Apply\n\n                                </MowButtonBasic>\n\n                            </View>\n\n                        </View>\n\n                    </MowModal>\n\n                    {/* body size modal */}\n                    <MowModal\n                        title='Body SIze'\n                        onClosed={() => { this.setState({ bodySizeModalVisible: false }); }}\n                        modalVisible={this.state.bodySizeModalVisible}>\n\n                        <View\n                            style={this.modalView.container}>\n\n                            {\n                                this.state.bodySize.map((value, index) => {\n\n                                    return (\n                                        <MowCheckListItem\n                                            selected={this._checkSelected(this.state.bodySizeSelectedItems, value.id)}\n                                            key={index}\n                                            item={value}\n                                            titleTextStyle={this.modalView.listTitle}\n                                            subtitleTextStyle={this.modalView.listSubTitle}\n                                            title={value.title}\n                                            onPress={this._bodySizeCallback} />\n                                    );\n                                })\n                            }\n\n                            {/* button view */}\n                            <View\n                                style={{\n                                    position: 'absolute',\n                                    bottom: 20,\n                                    width: '90%',\n                                    alignSelf: 'center',\n                                }}>\n\n                                {/* apply button */}\n                                <MowButtonBasic\n                                    onPress={() => {\n                                        this._arrayToString(this.state.bodySizeSelectedItems, 'bodySizeSelected');\n                                        this.setState({ bodySizeModalVisible: false });\n                                    }}\n                                    stickyIcon={true}\n                                    containerStyle={this.modalView.button}\n                                    leftIcon={'check'}\n                                    type={'success'}>\n\n                                    Apply\n\n                                </MowButtonBasic>\n\n                            </View>\n\n                        </View>\n\n                    </MowModal>\n\n                    {/* rating score modal */}\n                    <MowModal\n                        title='Rating'\n                        onClosed={() => { this.setState({ ratingScoreModalVisible: false }); }}\n                        modalVisible={this.state.ratingScoreModalVisible}>\n\n                        <View\n                            style={this.modalView.container}>\n\n                            {\n                                this.state.ratingScore.map((value, index) => {\n\n                                    return (\n                                        <MowCheckStarListItem\n                                            score={value.title}\n                                            selected={this._checkSelected(this.state.ratingScoreSelectedItems, value.id)}\n                                            key={index}\n                                            titleTextStyle={this.modalView.listTitle}\n                                            subtitleTextStyle={this.modalView.listSubTitle}\n                                            item={value}\n                                            onPress={this._ratingScoreCallback} />\n                                    );\n                                })\n                            }\n\n                            {/* button view */}\n                            <View\n                                style={{\n                                    position: 'absolute',\n                                    bottom: 20,\n                                    width: '90%',\n                                    alignSelf: 'center',\n                                }}>\n\n                                {/* apply button */}\n                                <MowButtonBasic\n                                    onPress={() => {\n                                        this._arrayToString(this.state.ratingScoreSelectedItems, 'ratingScoreSelected');\n                                        this.setState({ ratingScoreModalVisible: false });\n                                    }}\n                                    containerStyle={this.modalView.button}\n                                    stickyIcon={true}\n                                    leftIcon={'check'}\n                                    type={'success'}>\n\n                                    Apply\n\n                                </MowButtonBasic>\n\n                            </View>\n\n                        </View>\n\n                    </MowModal>\n\n                </View>\n\n                {/* button view */}\n                <View\n                    style={{\n                        ...{\n                            position: 'absolute',\n                            bottom: 20,\n                            width: '90%',\n                            alignSelf: 'center',\n                        }, bottom: 0\n                    }}>\n\n                    {/* apply button */}\n                    <MowButtonBasic\n                        onPress={() => { this.props.navigation.navigate('ProductList'); }} // send here filter data, then request server with filter data for filtered products\n                        stickyIcon={true}\n                        containerStyle={{ backgroundColor: mowColors.mainColor }}\n                        leftIcon={'check'}\n                        type={'success'}>\n\n                        Apply\n\n                    </MowButtonBasic>\n\n                </View>\n\n            </MowContainer>\n\n        );\n\n    }\n\n}\n\nconst listItemStyle = ({\n    container: {\n        marginVertical: 5,\n        marginHorizontal: 10,\n        height: hp(8),\n    },\n    subtitle: {\n        color: mowColors.mainColor,\n    },\n});\n\nconst modalStyle = ({\n    buttonView: {\n        position: 'absolute',\n        bottom: 20,\n        width: '90%',\n        alignSelf: 'center',\n    },\n});\n"]},"metadata":{},"sourceType":"module"}