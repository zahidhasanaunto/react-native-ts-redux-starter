{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import View from\"react-native-web/dist/exports/View\";import Dimensions from\"react-native-web/dist/exports/Dimensions\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import I18nManager from\"react-native-web/dist/exports/I18nManager\";import Platform from\"react-native-web/dist/exports/Platform\";import BackHandler from\"react-native-web/dist/exports/BackHandler\";import{ScreenContainer}from'react-native-screens';import{GestureHandlerRootView}from'react-native-gesture-handler';import{DrawerActions,useTheme}from'@react-navigation/native';import DrawerGestureContext from\"../utils/DrawerGestureContext\";import SafeAreaProviderCompat from\"./SafeAreaProviderCompat\";import ResourceSavingScene from\"./ResourceSavingScene\";import DrawerContent from\"./DrawerContent\";import Drawer from\"./Drawer\";import DrawerOpenContext from\"../utils/DrawerOpenContext\";import DrawerPositionContext from\"../utils/DrawerPositionContext\";var getDefaultDrawerWidth=function getDefaultDrawerWidth(_ref){var height=_ref.height,width=_ref.width;var smallerAxisSize=Math.min(height,width);var isLandscape=width>height;var isTablet=smallerAxisSize>=600;var appBarHeight=Platform.OS==='ios'?isLandscape?32:44:56;var maxWidth=isTablet?320:280;return Math.min(smallerAxisSize-appBarHeight,maxWidth);};var GestureHandlerWrapper=GestureHandlerRootView!==null&&GestureHandlerRootView!==void 0?GestureHandlerRootView:View;export default function DrawerView(_ref2){var state=_ref2.state,navigation=_ref2.navigation,descriptors=_ref2.descriptors,_ref2$lazy=_ref2.lazy,lazy=_ref2$lazy===void 0?true:_ref2$lazy,_ref2$drawerContent=_ref2.drawerContent,drawerContent=_ref2$drawerContent===void 0?function(props){return React.createElement(DrawerContent,props);}:_ref2$drawerContent,_ref2$drawerPosition=_ref2.drawerPosition,drawerPosition=_ref2$drawerPosition===void 0?I18nManager.isRTL?'right':'left':_ref2$drawerPosition,_ref2$keyboardDismiss=_ref2.keyboardDismissMode,keyboardDismissMode=_ref2$keyboardDismiss===void 0?'on-drag':_ref2$keyboardDismiss,_ref2$overlayColor=_ref2.overlayColor,overlayColor=_ref2$overlayColor===void 0?'rgba(0, 0, 0, 0.5)':_ref2$overlayColor,_ref2$drawerType=_ref2.drawerType,drawerType=_ref2$drawerType===void 0?'front':_ref2$drawerType,_ref2$hideStatusBar=_ref2.hideStatusBar,hideStatusBar=_ref2$hideStatusBar===void 0?false:_ref2$hideStatusBar,_ref2$statusBarAnimat=_ref2.statusBarAnimation,statusBarAnimation=_ref2$statusBarAnimat===void 0?'slide':_ref2$statusBarAnimat,drawerContentOptions=_ref2.drawerContentOptions,drawerStyle=_ref2.drawerStyle,edgeWidth=_ref2.edgeWidth,gestureHandlerProps=_ref2.gestureHandlerProps,minSwipeDistance=_ref2.minSwipeDistance,sceneContainerStyle=_ref2.sceneContainerStyle;var _React$useState=React.useState([state.index]),_React$useState2=_slicedToArray(_React$useState,2),loaded=_React$useState2[0],setLoaded=_React$useState2[1];var _React$useState3=React.useState(function(){var _Dimensions$get=Dimensions.get('window'),_Dimensions$get$heigh=_Dimensions$get.height,height=_Dimensions$get$heigh===void 0?0:_Dimensions$get$heigh,_Dimensions$get$width=_Dimensions$get.width,width=_Dimensions$get$width===void 0?0:_Dimensions$get$width;return getDefaultDrawerWidth({height:height,width:width});}),_React$useState4=_slicedToArray(_React$useState3,2),drawerWidth=_React$useState4[0],setDrawerWidth=_React$useState4[1];var drawerGestureRef=React.useRef(null);var _useTheme=useTheme(),colors=_useTheme.colors;var isDrawerOpen=state.history.some(function(it){return it.type==='drawer';});var handleDrawerOpen=React.useCallback(function(){navigation.dispatch(_objectSpread({},DrawerActions.openDrawer(),{target:state.key}));},[navigation,state.key]);var handleDrawerClose=React.useCallback(function(){navigation.dispatch(_objectSpread({},DrawerActions.closeDrawer(),{target:state.key}));},[navigation,state.key]);React.useEffect(function(){if(isDrawerOpen){navigation.emit({type:'drawerOpen'});}else{navigation.emit({type:'drawerClose'});}},[isDrawerOpen,navigation]);React.useEffect(function(){var subscription;if(isDrawerOpen){subscription=BackHandler.addEventListener('hardwareBackPress',function(){handleDrawerClose();return true;});}return function(){var _subscription;return(_subscription=subscription)===null||_subscription===void 0?void 0:_subscription.remove();};},[handleDrawerClose,isDrawerOpen,navigation,state.key]);React.useEffect(function(){var updateWidth=function updateWidth(_ref3){var window=_ref3.window;setDrawerWidth(getDefaultDrawerWidth(window));};Dimensions.addEventListener('change',updateWidth);return function(){return Dimensions.removeEventListener('change',updateWidth);};},[]);if(!loaded.includes(state.index)){setLoaded([].concat(_toConsumableArray(loaded),[state.index]));}var renderNavigationView=function renderNavigationView(_ref4){var progress=_ref4.progress;return React.createElement(DrawerPositionContext.Provider,{value:drawerPosition},drawerContent(_objectSpread({},drawerContentOptions,{progress:progress,state:state,navigation:navigation,descriptors:descriptors})));};var renderContent=function renderContent(){return React.createElement(ScreenContainer,{style:styles.content},state.routes.map(function(route,index){var descriptor=descriptors[route.key];var unmountOnBlur=descriptor.options.unmountOnBlur;var isFocused=state.index===index;if(unmountOnBlur&&!isFocused){return null;}if(lazy&&!loaded.includes(index)&&!isFocused){return null;}return React.createElement(ResourceSavingScene,{key:route.key,style:[StyleSheet.absoluteFill,{opacity:isFocused?1:0}],isVisible:isFocused},descriptor.render());}));};var activeKey=state.routes[state.index].key;var gestureEnabled=descriptors[activeKey].options.gestureEnabled;return React.createElement(GestureHandlerWrapper,{style:styles.content},React.createElement(SafeAreaProviderCompat,null,React.createElement(DrawerGestureContext.Provider,{value:drawerGestureRef},React.createElement(DrawerOpenContext.Provider,{value:isDrawerOpen},React.createElement(Drawer,{open:isDrawerOpen,gestureEnabled:gestureEnabled,onOpen:handleDrawerOpen,onClose:handleDrawerClose,onGestureRef:function onGestureRef(ref){drawerGestureRef.current=ref;},gestureHandlerProps:gestureHandlerProps,drawerType:drawerType,drawerPosition:drawerPosition,sceneContainerStyle:[{backgroundColor:colors.background},sceneContainerStyle],drawerStyle:[{width:drawerWidth,backgroundColor:colors.card},drawerType==='permanent'&&(drawerPosition==='left'?{borderRightColor:colors.border,borderRightWidth:StyleSheet.hairlineWidth}:{borderLeftColor:colors.border,borderLeftWidth:StyleSheet.hairlineWidth}),drawerStyle],overlayStyle:{backgroundColor:overlayColor},swipeEdgeWidth:edgeWidth,swipeDistanceThreshold:minSwipeDistance,hideStatusBar:hideStatusBar,statusBarAnimation:statusBarAnimation,renderDrawerContent:renderNavigationView,renderSceneContent:renderContent,keyboardDismissMode:keyboardDismissMode,drawerPostion:drawerPosition})))));}var styles=StyleSheet.create({content:{flex:1}});","map":{"version":3,"sources":["DrawerView.tsx"],"names":["getDefaultDrawerWidth","width","smallerAxisSize","Math","isLandscape","isTablet","appBarHeight","Platform","maxWidth","GestureHandlerWrapper","GestureHandlerRootView","lazy","drawerContent","props","drawerPosition","I18nManager","keyboardDismissMode","overlayColor","drawerType","hideStatusBar","statusBarAnimation","sceneContainerStyle","React","state","height","Dimensions","drawerGestureRef","colors","useTheme","isDrawerOpen","it","handleDrawerOpen","navigation","DrawerActions","target","key","handleDrawerClose","type","subscription","updateWidth","window","setDrawerWidth","loaded","setLoaded","renderNavigationView","progress","descriptors","renderContent","styles","content","descriptor","route","unmountOnBlur","isFocused","StyleSheet","opacity","activeKey","gestureEnabled","ref","backgroundColor","background","card","borderRightColor","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Dimensions,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  ScaledSize,\n  BackHandler,\n  NativeEventSubscription,\n} from 'react-native';\n// eslint-disable-next-line import/no-unresolved\nimport { ScreenContainer } from 'react-native-screens';\nimport {\n  PanGestureHandler,\n  GestureHandlerRootView,\n} from 'react-native-gesture-handler';\nimport {\n  DrawerNavigationState,\n  DrawerActions,\n  useTheme,\n} from '@react-navigation/native';\n\nimport DrawerGestureContext from '../utils/DrawerGestureContext';\nimport SafeAreaProviderCompat from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport DrawerContent from './DrawerContent';\nimport Drawer from './Drawer';\nimport {\n  DrawerDescriptorMap,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerContentComponentProps,\n} from '../types';\nimport DrawerOpenContext from '../utils/DrawerOpenContext';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\n\ntype Props = DrawerNavigationConfig & {\n  state: DrawerNavigationState;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/guidelines/patterns/navigation-drawer.html\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Component that renders the drawer.\n */\nexport default function DrawerView({\n  state,\n  navigation,\n  descriptors,\n  lazy = true,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  drawerPosition = I18nManager.isRTL ? 'right' : 'left',\n  keyboardDismissMode = 'on-drag',\n  overlayColor = 'rgba(0, 0, 0, 0.5)',\n  drawerType = 'front',\n  hideStatusBar = false,\n  statusBarAnimation = 'slide',\n  drawerContentOptions,\n  drawerStyle,\n  edgeWidth,\n  gestureHandlerProps,\n  minSwipeDistance,\n  sceneContainerStyle,\n}: Props) {\n  const [loaded, setLoaded] = React.useState([state.index]);\n  const [drawerWidth, setDrawerWidth] = React.useState(() => {\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    return getDefaultDrawerWidth({ height, width });\n  });\n\n  const drawerGestureRef = React.useRef<PanGestureHandler>(null);\n\n  const { colors } = useTheme();\n\n  const isDrawerOpen = state.history.some((it) => it.type === 'drawer');\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    if (isDrawerOpen) {\n      navigation.emit({ type: 'drawerOpen' });\n    } else {\n      navigation.emit({ type: 'drawerClose' });\n    }\n  }, [isDrawerOpen, navigation]);\n\n  React.useEffect(() => {\n    let subscription: NativeEventSubscription | undefined;\n\n    if (isDrawerOpen) {\n      // We only add the subscription when drawer opens\n      // This way we can make sure that the subscription is added as late as possible\n      // This will make sure that our handler will run first when back button is pressed\n      subscription = BackHandler.addEventListener('hardwareBackPress', () => {\n        handleDrawerClose();\n\n        return true;\n      });\n    }\n\n    return () => subscription?.remove();\n  }, [handleDrawerClose, isDrawerOpen, navigation, state.key]);\n\n  React.useEffect(() => {\n    const updateWidth = ({ window }: { window: ScaledSize }) => {\n      setDrawerWidth(getDefaultDrawerWidth(window));\n    };\n\n    Dimensions.addEventListener('change', updateWidth);\n\n    return () => Dimensions.removeEventListener('change', updateWidth);\n  }, []);\n\n  if (!loaded.includes(state.index)) {\n    setLoaded([...loaded, state.index]);\n  }\n\n  const renderNavigationView = ({ progress }: any) => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          ...drawerContentOptions,\n          progress: progress,\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderContent = () => {\n    return (\n      <ScreenContainer style={styles.content}>\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(index) && !isFocused) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          return (\n            <ResourceSavingScene\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]}\n              isVisible={isFocused}\n            >\n              {descriptor.render()}\n            </ResourceSavingScene>\n          );\n        })}\n      </ScreenContainer>\n    );\n  };\n\n  const activeKey = state.routes[state.index].key;\n  const { gestureEnabled } = descriptors[activeKey].options;\n\n  return (\n    <GestureHandlerWrapper style={styles.content}>\n      <SafeAreaProviderCompat>\n        <DrawerGestureContext.Provider value={drawerGestureRef}>\n          <DrawerOpenContext.Provider value={isDrawerOpen}>\n            <Drawer\n              open={isDrawerOpen}\n              gestureEnabled={gestureEnabled}\n              onOpen={handleDrawerOpen}\n              onClose={handleDrawerClose}\n              onGestureRef={(ref) => {\n                // @ts-ignore\n                drawerGestureRef.current = ref;\n              }}\n              gestureHandlerProps={gestureHandlerProps}\n              drawerType={drawerType}\n              drawerPosition={drawerPosition}\n              sceneContainerStyle={[\n                { backgroundColor: colors.background },\n                sceneContainerStyle,\n              ]}\n              drawerStyle={[\n                { width: drawerWidth, backgroundColor: colors.card },\n                drawerType === 'permanent' &&\n                  (drawerPosition === 'left'\n                    ? {\n                        borderRightColor: colors.border,\n                        borderRightWidth: StyleSheet.hairlineWidth,\n                      }\n                    : {\n                        borderLeftColor: colors.border,\n                        borderLeftWidth: StyleSheet.hairlineWidth,\n                      }),\n                drawerStyle,\n              ]}\n              overlayStyle={{ backgroundColor: overlayColor }}\n              swipeEdgeWidth={edgeWidth}\n              swipeDistanceThreshold={minSwipeDistance}\n              hideStatusBar={hideStatusBar}\n              statusBarAnimation={statusBarAnimation}\n              renderDrawerContent={renderNavigationView}\n              renderSceneContent={renderContent}\n              keyboardDismissMode={keyboardDismissMode}\n              drawerPostion={drawerPosition}\n            />\n          </DrawerOpenContext.Provider>\n        </DrawerGestureContext.Provider>\n      </SafeAreaProviderCompat>\n    </GestureHandlerWrapper>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}