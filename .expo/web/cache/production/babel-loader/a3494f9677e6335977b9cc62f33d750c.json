{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";function _createSuper(Derived){return function(){var Super=_getPrototypeOf(Derived),result;if(_isNativeReflectConstruct()){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}import React from'react';import AppState from\"react-native-web/dist/exports/AppState\";import AsyncStorage from\"react-native-web/dist/exports/AsyncStorage\";import StatusBar from\"react-native-web/dist/exports/StatusBar\";import Text from\"react-native-web/dist/exports/Text\";import{Provider}from'react-redux';import{applyMiddleware,createStore}from'redux';import ReduxThunk from'redux-thunk';import{AppNavigator}from\"../navigation/app/app.navigator\";import reducers from\"../store/reducers\";import{AppLoading,LoadFontsTask}from\"./app-loading.component\";var loadingTasks=[function(){return LoadFontsTask({'opensans-regular':require(\"../assets/fonts/opensans-regular.ttf\"),'roboto-regular':require(\"../assets/fonts/roboto-regular.ttf\")});}];var store=createStore(reducers,{},applyMiddleware(ReduxThunk));var AppRoot=function AppRoot(_ref){var appStore=_ref.appStore;return React.createElement(React.Fragment,null,React.createElement(Provider,{store:appStore},React.createElement(StatusBar,null),React.createElement(AppNavigator,null)));};var App=function(_React$Component){_inherits(App,_React$Component);var _super=_createSuper(App);function App(props){var _this;_classCallCheck(this,App);_this=_super.call(this,props);_this.state={isStoreLoading:false,store:store};return _this;}_createClass(App,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;AppState.addEventListener('change',this._handleAppStateChange.bind(this));this.setState({isStoreLoading:true});AsyncStorage.getItem('completeStore').then(function(value){if(value){var initialStore=JSON.parse(value);_this2.setState({store:createStore(reducers,initialStore,applyMiddleware(ReduxThunk))});}else{_this2.setState({store:store});}_this2.setState({isStoreLoading:false});}).catch(function(error){_this2.setState({store:store});_this2.setState({isStoreLoading:false});});}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){AppState.removeEventListener('change',this._handleAppStateChange.bind(this));}},{key:\"_handleAppStateChange\",value:function _handleAppStateChange(currentAppState){var storingValue=JSON.stringify(this.state.store.getState());AsyncStorage.setItem('completeStore',storingValue);}},{key:\"render\",value:function render(){var _this3=this;if(this.state.isStoreLoading){return React.createElement(Text,null,\"Loading Store\");}else{return React.createElement(AppLoading,{tasks:loadingTasks},function(props){return React.createElement(AppRoot,_extends({appStore:_this3.state.store},props));});}}}]);return App;}(React.Component);export{App as default};","map":{"version":3,"sources":["/home/aunto/Projects/WCL/wcl-app/src/app/app.component.tsx"],"names":["loadingTasks","LoadFontsTask","require","store","createStore","applyMiddleware","AppRoot","appStore","App","React","isStoreLoading","AppState","AsyncStorage","initialStore","JSON","currentAppState","storingValue"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { AppState, AsyncStorage, StatusBar, Text } from 'react-native';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport { AppNavigator } from '../navigation/app/app.navigator';\nimport reducers from '../store/reducers';\nimport { AppLoading, LoadFontsTask, Task } from './app-loading.component';\n\nconst loadingTasks: Task[] = [\n  () => LoadFontsTask({\n    'opensans-regular': require('../assets/fonts/opensans-regular.ttf'),\n    'roboto-regular': require('../assets/fonts/roboto-regular.ttf'),\n  })\n];\n\nconst store = createStore(reducers, {}, applyMiddleware(ReduxThunk));\n\nconst AppRoot = ({ appStore }): React.ReactElement => {\n  return (\n    <React.Fragment>\n      <Provider store={appStore}>\n        <StatusBar />\n        <AppNavigator />\n      </Provider>\n    </React.Fragment>\n  );\n};\n\ninterface IState {\n  store: any;\n  isStoreLoading: boolean;\n}\n\nexport default class App extends React.Component<{}, IState> {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isStoreLoading: false,\n      store: store,\n    }\n  }\n\n  componentDidMount() {\n    AppState.addEventListener('change', this._handleAppStateChange.bind(this));\n    this.setState({ isStoreLoading: true });\n    AsyncStorage.getItem('completeStore').then((value) => {\n      if (value) {\n        const initialStore = JSON.parse(value);\n        this.setState({ store: createStore(reducers, initialStore, applyMiddleware(ReduxThunk)) });\n      } else {\n        this.setState({ store: store });\n      }\n      this.setState({ isStoreLoading: false });\n    }).catch((error) => {\n      this.setState({ store: store });\n      this.setState({ isStoreLoading: false });\n    })\n  }\n  componentWillUnmount() {\n    AppState.removeEventListener('change', this._handleAppStateChange.bind(this));\n  }\n  _handleAppStateChange(currentAppState) {\n    const storingValue = JSON.stringify(this.state.store.getState());\n    AsyncStorage.setItem('completeStore', storingValue);\n  }\n\n  render() {\n    if (this.state.isStoreLoading) {\n      return <Text>Loading Store</Text>\n    } else {\n      return (\n        <AppLoading\n          tasks={loadingTasks}\n        >\n          {props => <AppRoot appStore={this.state.store} {...props} />}\n        </AppLoading>\n      )\n    }\n  }\n}\n\n// const App = (): React.ReactElement => {\n//   const store = createStore(reducers, {}, applyMiddleware(ReduxThunk));\n\n//   return (\n//     <React.Fragment>\n//       <Provider store={store}>\n//         <StatusBar />\n//         <AppNavigator />\n//       </Provider>\n//     </React.Fragment>\n//   );\n// };\n\n// export default (): React.ReactElement => (\n//   <AppLoading\n//     tasks={loadingTasks}\n//   >\n//     {props => <App {...props} />}\n//   </AppLoading>\n// );\n"]},"metadata":{},"sourceType":"module"}