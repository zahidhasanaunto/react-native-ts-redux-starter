{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _extends from\"@babel/runtime/helpers/extends\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _createSuper(Derived){return function(){var Super=_getPrototypeOf(Derived),result;if(_isNativeReflectConstruct()){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}import React from\"react\";import PropTypes from'prop-types';import Text from\"react-native-web/dist/exports/Text\";import TouchableOpacity from\"react-native-web/dist/exports/TouchableOpacity\";import{shadowStyle}from\"../../../../values/Styles/MowStyles\";import{heightPercentageToDP as hp}from\"react-native-responsive-screen\";import{mowColors}from\"../../../../values/Colors/MowColors\";import FeatherIcon from\"@expo/vector-icons/Feather\";var _buttonSizes={big:{button:{height:hp(\"7%\")},text:{fontSize:20},icon:{fontSize:25}},medium:{button:{height:hp(\"6%\")},text:{fontSize:18},icon:{fontSize:22}},small:{button:{height:hp(\"4.2%\")},text:{fontSize:hp(\"1.4%\")},icon:{fontSize:19}},xSmall:{button:{height:hp(\"3.4%\")},text:{fontSize:13},icon:{fontSize:17}}};var MowButtonBase=function(_React$Component){_inherits(MowButtonBase,_React$Component);var _super=_createSuper(MowButtonBase);function MowButtonBase(props){_classCallCheck(this,MowButtonBase);return _super.call(this,props);}_createClass(MowButtonBase,[{key:\"render\",value:function render(){return React.createElement(TouchableOpacity,this.props,this.props.children);}}]);return MowButtonBase;}(React.Component);MowButtonBase.propTypes=_objectSpread({},TouchableOpacity.props);export var MowButtonBasic=function(_React$Component2){_inherits(MowButtonBasic,_React$Component2);var _super2=_createSuper(MowButtonBasic);function MowButtonBasic(props){var _this;_classCallCheck(this,MowButtonBasic);_this=_super2.call(this,props);_this.state={leftIcon:null,rightIcon:null};_this._doSetting();return _this;}_createClass(MowButtonBasic,[{key:\"_getSelectedBtnColor\",value:function _getSelectedBtnColor(){var buttonColors={default:\"white\",success:mowColors.successColor,warning:mowColors.warningColor,danger:mowColors.errorColor,info:mowColors.infoColor};return buttonColors[this.props.type];}},{key:\"_setSelectedSizes\",value:function _setSelectedSizes(){var size=this.props.size;if(!size){size=\"medium\";}this.btnStyle.height=_buttonSizes[size].button.height;this.textStyle.fontSize=_buttonSizes[size].text.fontSize;this.iconStyle.fontSize=_buttonSizes[size].icon.fontSize;}},{key:\"_getSelectedTextColor\",value:function _getSelectedTextColor(){return!this.props.filled?this._getSelectedBtnColor():\"white\";}},{key:\"_setTextStyle\",value:function _setTextStyle(){return this.textStyle={color:this._getSelectedTextColor(),fontWeight:\"bold\",marginHorizontal:this.props.stickyIcon?10:0};}},{key:\"_setIconStyle\",value:function _setIconStyle(){return this.iconStyle={color:this._getSelectedTextColor(),position:this.props.stickyIcon?\"relative\":\"absolute\"};}},{key:\"_setBtnStyle\",value:function _setBtnStyle(){this.btnStyle={flexDirection:\"row\",margin:10,width:\"100%\",alignSelf:'center',alignItems:'center',justifyContent:\"center\",padding:0,height:hp(\"7%\"),backgroundColor:mowColors.mainColor,borderRadius:5};if(this.props.filled){this.btnStyle.backgroundColor=this._getSelectedBtnColor();}else{this.btnStyle.backgroundColor=\"transparent\";this.btnStyle.borderWidth=1.5;this.btnStyle.borderColor=this._getSelectedBtnColor();}if(this.props.shadow){_extends(this.btnStyle,shadowStyle);}}},{key:\"_doSetting\",value:function _doSetting(){this._setBtnStyle();this._setTextStyle();this._setIconStyle();this._setSelectedSizes();this.state.leftIcon=this.props.leftIcon;this.state.rightIcon=this.props.rightIcon;}},{key:\"componentDidUpdate\",value:function componentDidUpdate(nextProps,nextState,nextContext){this._doSetting();}},{key:\"render\",value:function render(){return React.createElement(MowButtonBase,_extends({},this.props,{style:[this.btnStyle,this.props.containerStyle]}),this.state.leftIcon&&React.createElement(FeatherIcon,{style:[this.iconStyle,_objectSpread({left:this.props.stickyIcon?0:20},this.props.leftIconStyle)],name:this.state.leftIcon}),React.createElement(Text,{style:[this.textStyle,_objectSpread({},this.props.textStyle)]},this.props.children),this.state.rightIcon&&React.createElement(FeatherIcon,{style:[this.iconStyle,_objectSpread({right:this.props.stickyIcon?0:20},this.props.rightIconStyle)],name:this.state.rightIcon}));}}]);return MowButtonBasic;}(React.Component);MowButtonBasic.propTypes=_objectSpread({},MowButtonBase.props,{textStyle:PropTypes.object,type:PropTypes.oneOf(['default','success','danger','warning','info']),size:PropTypes.oneOf(['big','medium','small','xSmall']),leftIcon:PropTypes.string,leftIconStyle:PropTypes.object,rightIcon:PropTypes.string,rightIconStyle:PropTypes.object,stickyIcon:PropTypes.bool,filled:PropTypes.bool,shadow:PropTypes.bool,containerStyle:PropTypes.object,disabled:PropTypes.bool});MowButtonBasic.defaultProps={filled:true,type:\"default\"};","map":{"version":3,"sources":["/home/aunto/Projects/WCL/wcl-app/src/components/ui/Common/Button/MowButton.js"],"names":["heightPercentageToDP","_buttonSizes","big","button","height","hp","text","fontSize","icon","medium","small","xSmall","MowButtonBase","React","TouchableOpacity","MowButtonBasic","props","textStyle","PropTypes","object","type","size","leftIcon","string","leftIconStyle","rightIcon","rightIconStyle","stickyIcon","bool","filled","shadow","containerStyle","disabled","state","buttonColors","default","success","mowColors","warning","danger","info","color","fontWeight","marginHorizontal","position","flexDirection","margin","width","alignSelf","alignItems","justifyContent","padding","backgroundColor","borderRadius","left","right"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { Text, TouchableOpacity } from \"react-native\";\nimport { shadowStyle } from \"../../../../values/Styles/MowStyles\";\nimport { heightPercentageToDP as hp } from \"react-native-responsive-screen\";\nimport { mowColors } from \"../../../../values/Colors/MowColors\";\nimport FeatherIcon from \"react-native-vector-icons/Feather\";\n\n/**\n * Hello dear developer.\n * This component is core of all buttons. You change base sizes, base colors and what you want.\n */\n\n/***\n *  button height according to the button type\n */\nconst _buttonSizes = {\n    big: {\n        button: {\n            height: hp(\"7%\")\n        },\n        text: {\n            fontSize: 20,\n        },\n        icon: {\n            fontSize: 25,\n        },\n    },\n    medium: {\n        button: {\n            height: hp(\"6%\")\n        },\n        text: {\n            fontSize: 18,\n        },\n        icon: {\n            fontSize: 22,\n        },\n    },\n    small: {\n        button: {\n            height: hp(\"4.2%\")\n        },\n        text: {\n            fontSize: hp(\"1.4%\")\n        },\n        icon: {\n            fontSize: 19,\n        },\n    },\n    xSmall: {\n        button: {\n            height: hp(\"3.4%\")\n        },\n        text: {\n            fontSize: 13,\n        },\n        icon: {\n            fontSize: 17,\n        },\n    }\n};\n\n\n\nclass MowButtonBase extends React.Component {\n\n    static propTypes = {\n        ...TouchableOpacity.props,\n\n    };\n\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n        return (\n            <TouchableOpacity\n                {...this.props}>\n\n                {this.props.children}\n\n            </TouchableOpacity>\n        )\n    }\n}\n\n\nexport class MowButtonBasic extends React.Component {\n\n    static propTypes = {\n        ...MowButtonBase.props,\n        textStyle: PropTypes.object,\n        type: PropTypes.oneOf(['default', 'success', 'danger', 'warning', 'info']),\n        size: PropTypes.oneOf(['big', 'medium', 'small', 'xSmall']),\n        leftIcon: PropTypes.string,\n        leftIconStyle: PropTypes.object,\n        rightIcon: PropTypes.string,\n        rightIconStyle: PropTypes.object,\n        stickyIcon: PropTypes.bool,\n        filled: PropTypes.bool,\n        shadow: PropTypes.bool,\n        containerStyle: PropTypes.object,\n        disabled: PropTypes.bool\n    };\n\n    static defaultProps = {\n        filled: true,\n        type: \"default\"\n    };\n\n    state = {\n        leftIcon: null,\n        rightIcon: null,\n    };\n\n    constructor(props) {\n        super(props);\n        this._doSetting();\n    }\n\n    _getSelectedBtnColor() {\n        let buttonColors = {\n            default: \"white\",\n            success: mowColors.successColor,\n            warning: mowColors.warningColor,\n            danger: mowColors.errorColor,\n            info: mowColors.infoColor\n        };\n        return buttonColors[this.props.type];\n    }\n    _setSelectedSizes() {\n        /**\n         *  button size according to the height\n         */\n        let size = this.props.size;\n        if (!size) {\n            size = \"medium\";\n        }\n\n        this.btnStyle.height = _buttonSizes[size].button.height;\n        this.textStyle.fontSize = _buttonSizes[size].text.fontSize;\n        this.iconStyle.fontSize = _buttonSizes[size].icon.fontSize;\n    }\n\n    _getSelectedTextColor() {\n        return (!this.props.filled ? this._getSelectedBtnColor() : \"white\");\n    }\n\n    _setTextStyle() {\n\n        return this.textStyle = { color: this._getSelectedTextColor(), fontWeight: \"bold\", marginHorizontal: this.props.stickyIcon ? 10 : 0 }\n    }\n\n    _setIconStyle() {\n\n        return this.iconStyle = { color: this._getSelectedTextColor(), position: this.props.stickyIcon ? \"relative\" : \"absolute\" };\n    }\n\n    _setBtnStyle() {\n\n        this.btnStyle = {\n            flexDirection: \"row\",\n            margin: 10,\n            width: \"100%\",\n            alignSelf: 'center',\n            alignItems: 'center',\n            justifyContent: \"center\",\n            padding: 0,\n            height: hp(\"7%\"),\n            backgroundColor: mowColors.mainColor,\n            borderRadius: 5\n        };\n        if (this.props.filled) {\n            this.btnStyle.backgroundColor = this._getSelectedBtnColor();\n        } else {\n            this.btnStyle.backgroundColor = \"transparent\";\n            this.btnStyle.borderWidth = 1.5;\n            this.btnStyle.borderColor = this._getSelectedBtnColor();\n        }\n\n        // to set shadow style to the button\n        if (this.props.shadow) {\n            Object.assign(this.btnStyle, shadowStyle)\n        }\n    }\n\n    _doSetting() {\n\n        /**\n         * Generate and set button style according to the props.\n         * YOU CAN CHANGE AND CREATE YOUR OWN STYLE\n         */\n        this._setBtnStyle();\n\n        /**\n         * Generate Button Text Style\n         */\n        this._setTextStyle();\n\n        /**\n         * Generate left or right icon style\n         */\n        this._setIconStyle();\n\n        /**\n         * Set sizes according to size prop\n         */\n        this._setSelectedSizes();\n\n        /**\n         *  left & right icon assigning\n         */\n        this.state.leftIcon = this.props.leftIcon;\n        this.state.rightIcon = this.props.rightIcon;\n\n    }\n\n    componentDidUpdate(nextProps, nextState, nextContext) {\n        /**\n         * redo settings for preventing button props when opening popup, modal, etc.\n         */\n        this._doSetting()\n    }\n\n    render() {\n        return (\n\n            <MowButtonBase\n                {...this.props}\n                style={[\n                    this.btnStyle,\n                    this.props.containerStyle\n                ]}>\n\n                {\n                    this.state.leftIcon &&\n\n                    <FeatherIcon\n                        style={[\n                            this.iconStyle,\n                            {\n                                left: this.props.stickyIcon ? 0 : 20,\n                                ...this.props.leftIconStyle\n                            }\n                        ]}\n                        name={this.state.leftIcon} />\n                }\n\n\n                <Text\n                    style={[\n                        this.textStyle,\n                        { ...this.props.textStyle }\n                    ]}>\n\n                    {this.props.children}\n\n                </Text>\n\n                {\n                    this.state.rightIcon &&\n\n                    <FeatherIcon\n                        style={[\n                            this.iconStyle,\n                            {\n                                right: this.props.stickyIcon ? 0 : 20,\n                                ...this.props.rightIconStyle\n                            }\n                        ]}\n                        name={this.state.rightIcon} />\n                }\n\n            </MowButtonBase>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}