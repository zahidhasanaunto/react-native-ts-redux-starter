{"ast":null,"code":"function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import{CommonActions,DrawerActions}from'@react-navigation/native';import DrawerItem from\"./DrawerItem\";export default function DrawerItemList(_ref){var state=_ref.state,navigation=_ref.navigation,descriptors=_ref.descriptors,activeTintColor=_ref.activeTintColor,inactiveTintColor=_ref.inactiveTintColor,activeBackgroundColor=_ref.activeBackgroundColor,inactiveBackgroundColor=_ref.inactiveBackgroundColor,itemStyle=_ref.itemStyle,labelStyle=_ref.labelStyle;return state.routes.map(function(route,i){var focused=i===state.index;var _descriptors$route$ke=descriptors[route.key].options,title=_descriptors$route$ke.title,drawerLabel=_descriptors$route$ke.drawerLabel,drawerIcon=_descriptors$route$ke.drawerIcon;return React.createElement(DrawerItem,{key:route.key,label:drawerLabel!==undefined?drawerLabel:title!==undefined?title:route.name,icon:drawerIcon,focused:focused,activeTintColor:activeTintColor,inactiveTintColor:inactiveTintColor,activeBackgroundColor:activeBackgroundColor,inactiveBackgroundColor:inactiveBackgroundColor,labelStyle:labelStyle,style:itemStyle,onPress:function onPress(){navigation.dispatch(_objectSpread({},focused?DrawerActions.closeDrawer():CommonActions.navigate(route.name),{target:state.key}));}});});}","map":{"version":3,"sources":["DrawerItemList.tsx"],"names":["labelStyle","focused","i","state","drawerIcon","descriptors","route","drawerLabel","title","navigation","DrawerActions","CommonActions","target","key"],"mappings":"k9BAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,CACA,OAAA,aAAA,CAAA,aAAA,KAAA,0BAAA,CAKA,MAAA,CAAA,UAAA,oBAgBA,cAAe,SAAA,CAAA,cAAA,MAUL,IAV6B,CAAA,KAU7B,MAV6B,KAU7B,CAV6B,UAU7B,MAV6B,UAU7B,CAV6B,WAU7B,MAV6B,WAU7B,CAV6B,eAU7B,MAV6B,eAU7B,CAV6B,iBAU7B,MAV6B,iBAU7B,CAV6B,qBAU7B,MAV6B,qBAU7B,CAV6B,uBAU7B,MAV6B,uBAU7B,CAV6B,SAU7B,MAV6B,SAU7B,CADRA,UACQ,MADRA,UACQ,CACR,MAAQ,CAAA,KAAK,CAAL,MAAA,CAAA,GAAA,CAAiB,SAAA,KAAA,CAAA,CAAA,CAAc,CACrC,GAAMC,CAAAA,OAAO,CAAGC,CAAC,GAAKC,KAAK,CAA3B,KAAA,CADqC,0BAEME,WAAW,CAACC,KAAK,CAAjBD,GAAW,CAAXA,CAA3C,OAFqC,CAE/B,KAF+B,uBAE/B,KAF+B,CAE/B,WAF+B,uBAE/B,WAF+B,CAETD,UAFS,uBAETA,UAFS,CAIrC,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,UAAA,CAAA,CACE,GAAG,CAAEE,KAAK,CADZ,GAAA,CAEE,KAAK,CACHC,WAAW,GAAXA,SAAAA,CAAAA,WAAAA,CAEIC,KAAK,GAALA,SAAAA,CAAAA,KAAAA,CAEAF,KAAK,CAPb,IAAA,CASE,IAAI,CATN,UAAA,CAUE,OAAO,CAVT,OAAA,CAWE,eAAe,CAXjB,eAAA,CAYE,iBAAiB,CAZnB,iBAAA,CAaE,qBAAqB,CAbvB,qBAAA,CAcE,uBAAuB,CAdzB,uBAAA,CAeE,UAAU,CAfZ,UAAA,CAgBE,KAAK,CAhBP,SAAA,CAiBE,OAAO,CAAE,kBAAM,CACbG,UAAU,CAAVA,QAAAA,CAAAA,aAAAA,CAAAA,EAAAA,CACMR,OAAO,CACPS,aAAa,CADN,WACPA,EADO,CAEPC,aAAa,CAAbA,QAAAA,CAAuBL,KAAK,CAHlCG,IAGME,CAHNF,CAAAA,CAIEG,MAAM,CAAET,KAAK,CAACU,GAJhBJ,CAAAA,CAAAA,EAMD,CAxBH,CAAA,CADF,CAJF,CAAQ,CAAR,CAiCD","sourcesContent":["import * as React from 'react';\nimport {\n  CommonActions,\n  DrawerActions,\n  DrawerNavigationState,\n} from '@react-navigation/native';\nimport DrawerItem from './DrawerItem';\nimport {\n  DrawerNavigationHelpers,\n  DrawerDescriptorMap,\n  DrawerContentOptions,\n} from '../types';\n\ntype Props = Omit<DrawerContentOptions, 'contentContainerStyle' | 'style'> & {\n  state: DrawerNavigationState;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nexport default function DrawerItemList({\n  state,\n  navigation,\n  descriptors,\n  activeTintColor,\n  inactiveTintColor,\n  activeBackgroundColor,\n  inactiveBackgroundColor,\n  itemStyle,\n  labelStyle,\n}: Props) {\n  return (state.routes.map((route, i) => {\n    const focused = i === state.index;\n    const { title, drawerLabel, drawerIcon } = descriptors[route.key].options;\n\n    return (\n      <DrawerItem\n        key={route.key}\n        label={\n          drawerLabel !== undefined\n            ? drawerLabel\n            : title !== undefined\n            ? title\n            : route.name\n        }\n        icon={drawerIcon}\n        focused={focused}\n        activeTintColor={activeTintColor}\n        inactiveTintColor={inactiveTintColor}\n        activeBackgroundColor={activeBackgroundColor}\n        inactiveBackgroundColor={inactiveBackgroundColor}\n        labelStyle={labelStyle}\n        style={itemStyle}\n        onPress={() => {\n          navigation.dispatch({\n            ...(focused\n              ? DrawerActions.closeDrawer()\n              : CommonActions.navigate(route.name)),\n            target: state.key,\n          });\n        }}\n      />\n    );\n  }) as React.ReactNode) as React.ReactElement;\n}\n"]},"metadata":{},"sourceType":"module"}