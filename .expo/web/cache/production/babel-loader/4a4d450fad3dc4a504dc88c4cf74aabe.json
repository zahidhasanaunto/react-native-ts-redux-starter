{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _assertThisInitialized from\"@babel/runtime/helpers/assertThisInitialized\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";function _createSuper(Derived){return function(){var Super=_getPrototypeOf(Derived),result;if(_isNativeReflectConstruct()){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import I18nManager from\"react-native-web/dist/exports/I18nManager\";import Platform from\"react-native-web/dist/exports/Platform\";import Keyboard from\"react-native-web/dist/exports/Keyboard\";import StatusBar from\"react-native-web/dist/exports/StatusBar\";import View from\"react-native-web/dist/exports/View\";import InteractionManager from\"react-native-web/dist/exports/InteractionManager\";import{PanGestureHandler,TapGestureHandler,State}from'react-native-gesture-handler';import Animated from'react-native-reanimated';import Overlay from\"./Overlay\";var Clock=Animated.Clock,Value=Animated.Value,onChange=Animated.onChange,clockRunning=Animated.clockRunning,startClock=Animated.startClock,stopClock=Animated.stopClock,spring=Animated.spring,abs=Animated.abs,add=Animated.add,and=Animated.and,block=Animated.block,call=Animated.call,cond=Animated.cond,divide=Animated.divide,eq=Animated.eq,event=Animated.event,greaterThan=Animated.greaterThan,lessThan=Animated.lessThan,max=Animated.max,min=Animated.min,multiply=Animated.multiply,neq=Animated.neq,or=Animated.or,set=Animated.set,sub=Animated.sub;var TRUE=1;var FALSE=0;var NOOP=0;var UNSET=-1;var DIRECTION_LEFT=1;var DIRECTION_RIGHT=-1;var SWIPE_DISTANCE_THRESHOLD_DEFAULT=60;var SWIPE_DISTANCE_MINIMUM=5;var SPRING_CONFIG={stiffness:1000,damping:500,mass:3,overshootClamping:true,restDisplacementThreshold:0.01,restSpeedThreshold:0.01};var ANIMATED_ONE=new Animated.Value(1);function shouldEnableGesture(){if(Platform.OS==='web'&&typeof navigator!=='undefined'&&typeof window!=='undefined'){var isWebAppleDevice=/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream;return!isWebAppleDevice;}return true;}var DrawerView=function(_React$PureComponent){_inherits(DrawerView,_React$PureComponent);var _super=_createSuper(DrawerView);function DrawerView(){var _this;_classCallCheck(this,DrawerView);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_defineProperty(_assertThisInitialized(_this),\"handleEscape\",function(e){var _this$props=_this.props,open=_this$props.open,onClose=_this$props.onClose;if(e.key==='Escape'){if(open){onClose();}}});_defineProperty(_assertThisInitialized(_this),\"handleEndInteraction\",function(){if(_this.interactionHandle!==undefined){InteractionManager.clearInteractionHandle(_this.interactionHandle);_this.interactionHandle=undefined;}});_defineProperty(_assertThisInitialized(_this),\"handleStartInteraction\",function(){if(_this.interactionHandle===undefined){_this.interactionHandle=InteractionManager.createInteractionHandle();}});_defineProperty(_assertThisInitialized(_this),\"clock\",new Clock());_defineProperty(_assertThisInitialized(_this),\"interactionHandle\",void 0);_defineProperty(_assertThisInitialized(_this),\"isDrawerTypeFront\",new Value(_this.props.drawerType==='front'?TRUE:FALSE));_defineProperty(_assertThisInitialized(_this),\"isGestureEnabled\",new Value(_this.props.gestureEnabled?TRUE:FALSE));_defineProperty(_assertThisInitialized(_this),\"isOpen\",new Value(_this.props.open?TRUE:FALSE));_defineProperty(_assertThisInitialized(_this),\"nextIsOpen\",new Value(UNSET));_defineProperty(_assertThisInitialized(_this),\"isSwiping\",new Value(FALSE));_defineProperty(_assertThisInitialized(_this),\"gestureState\",new Value(State.UNDETERMINED));_defineProperty(_assertThisInitialized(_this),\"touchX\",new Value(0));_defineProperty(_assertThisInitialized(_this),\"velocityX\",new Value(0));_defineProperty(_assertThisInitialized(_this),\"gestureX\",new Value(0));_defineProperty(_assertThisInitialized(_this),\"offsetX\",new Value(0));_defineProperty(_assertThisInitialized(_this),\"position\",new Value(0));_defineProperty(_assertThisInitialized(_this),\"containerWidth\",new Value(0));_defineProperty(_assertThisInitialized(_this),\"drawerWidth\",new Value(0));_defineProperty(_assertThisInitialized(_this),\"drawerOpacity\",new Value(0));_defineProperty(_assertThisInitialized(_this),\"drawerPosition\",new Value(_this.props.drawerPosition==='right'?DIRECTION_RIGHT:DIRECTION_LEFT));_defineProperty(_assertThisInitialized(_this),\"touchDistanceFromDrawer\",cond(_this.isDrawerTypeFront,cond(eq(_this.drawerPosition,DIRECTION_LEFT),max(sub(sub(_this.touchX,_this.gestureX),_this.drawerWidth),0),min(multiply(sub(sub(_this.containerWidth,_this.drawerWidth),sub(_this.touchX,_this.gestureX)),DIRECTION_RIGHT),0)),0));_defineProperty(_assertThisInitialized(_this),\"swipeDistanceThreshold\",new Value(_this.props.swipeDistanceThreshold!==undefined?_this.props.swipeDistanceThreshold:SWIPE_DISTANCE_THRESHOLD_DEFAULT));_defineProperty(_assertThisInitialized(_this),\"swipeVelocityThreshold\",new Value(_this.props.swipeVelocityThreshold));_defineProperty(_assertThisInitialized(_this),\"currentOpenValue\",_this.props.open);_defineProperty(_assertThisInitialized(_this),\"pendingOpenValue\",void 0);_defineProperty(_assertThisInitialized(_this),\"isStatusBarHidden\",false);_defineProperty(_assertThisInitialized(_this),\"manuallyTriggerSpring\",new Value(FALSE));_defineProperty(_assertThisInitialized(_this),\"transitionTo\",function(isOpen){var toValue=new Value(0);var frameTime=new Value(0);var state={position:_this.position,time:new Value(0),finished:new Value(FALSE),velocity:new Value(0)};return block([cond(clockRunning(_this.clock),NOOP,[set(toValue,multiply(isOpen,_this.drawerWidth,_this.drawerPosition)),set(frameTime,0),set(state.time,0),set(state.finished,FALSE),set(state.velocity,_this.velocityX),set(_this.isOpen,isOpen),startClock(_this.clock),call([],_this.handleStartInteraction),set(_this.manuallyTriggerSpring,FALSE)]),spring(_this.clock,state,_objectSpread({},SPRING_CONFIG,{toValue:toValue})),cond(state.finished,[set(_this.touchX,0),set(_this.gestureX,0),set(_this.velocityX,0),set(_this.offsetX,0),stopClock(_this.clock),call([_this.isOpen],function(_ref){var _ref2=_slicedToArray(_ref,1),value=_ref2[0];var open=Boolean(value);_this.handleEndInteraction();if(open!==_this.props.open){_this.toggleDrawer(_this.props.open);}})])]);});_defineProperty(_assertThisInitialized(_this),\"dragX\",block([onChange(_this.isOpen,call([_this.isOpen],function(_ref3){var _ref4=_slicedToArray(_ref3,1),value=_ref4[0];var open=Boolean(value);_this.currentOpenValue=open;if(open!==_this.props.open){if(open){_this.props.onOpen();}else{_this.props.onClose();}_this.pendingOpenValue=open;_this.forceUpdate();}})),onChange(_this.nextIsOpen,cond(neq(_this.nextIsOpen,UNSET),[cond(clockRunning(_this.clock),stopClock(_this.clock)),set(_this.isOpen,_this.nextIsOpen),set(_this.gestureX,0),set(_this.nextIsOpen,UNSET)])),onChange(_this.isSwiping,call([_this.isSwiping],function(_ref5){var _ref6=_slicedToArray(_ref5,1),value=_ref6[0];var keyboardDismissMode=_this.props.keyboardDismissMode;if(value===TRUE){if(keyboardDismissMode==='on-drag'){Keyboard.dismiss();}_this.toggleStatusBar(true);}else{_this.toggleStatusBar(_this.currentOpenValue);}})),onChange(_this.gestureState,cond(eq(_this.gestureState,State.ACTIVE),call([],_this.handleStartInteraction))),cond(eq(_this.gestureState,State.ACTIVE),[cond(_this.isSwiping,NOOP,[set(_this.isSwiping,TRUE),set(_this.offsetX,_this.position)]),set(_this.position,add(_this.offsetX,_this.gestureX,_this.touchDistanceFromDrawer)),stopClock(_this.clock)],[set(_this.isSwiping,FALSE),set(_this.touchX,0),_this.transitionTo(cond(_this.manuallyTriggerSpring,_this.isOpen,cond(or(and(greaterThan(abs(_this.gestureX),SWIPE_DISTANCE_MINIMUM),greaterThan(abs(_this.velocityX),_this.swipeVelocityThreshold)),greaterThan(abs(_this.gestureX),_this.swipeDistanceThreshold)),cond(eq(_this.drawerPosition,DIRECTION_LEFT),greaterThan(cond(eq(_this.velocityX,0),_this.gestureX,_this.velocityX),0),lessThan(cond(eq(_this.velocityX,0),_this.gestureX,_this.velocityX),0)),_this.isOpen)))]),_this.position]));_defineProperty(_assertThisInitialized(_this),\"translateX\",cond(eq(_this.drawerPosition,DIRECTION_RIGHT),min(max(multiply(_this.drawerWidth,-1),_this.dragX),0),max(min(_this.drawerWidth,_this.dragX),0)));_defineProperty(_assertThisInitialized(_this),\"progress\",cond(eq(_this.drawerWidth,0),0,abs(divide(_this.translateX,_this.drawerWidth))));_defineProperty(_assertThisInitialized(_this),\"handleGestureEvent\",event([{nativeEvent:{x:_this.touchX,translationX:_this.gestureX,velocityX:_this.velocityX}}]));_defineProperty(_assertThisInitialized(_this),\"handleGestureStateChange\",event([{nativeEvent:{state:function state(s){return set(_this.gestureState,s);}}}]));_defineProperty(_assertThisInitialized(_this),\"handleTapStateChange\",event([{nativeEvent:{oldState:function oldState(s){return cond(eq(s,State.ACTIVE),set(_this.manuallyTriggerSpring,TRUE));}}}]));_defineProperty(_assertThisInitialized(_this),\"handleContainerLayout\",function(e){return _this.containerWidth.setValue(e.nativeEvent.layout.width);});_defineProperty(_assertThisInitialized(_this),\"handleDrawerLayout\",function(e){_this.drawerWidth.setValue(e.nativeEvent.layout.width);_this.toggleDrawer(_this.props.open);requestAnimationFrame(function(){return requestAnimationFrame(function(){return _this.drawerOpacity.setValue(1);});});});_defineProperty(_assertThisInitialized(_this),\"toggleDrawer\",function(open){if(_this.currentOpenValue!==open){_this.nextIsOpen.setValue(open?TRUE:FALSE);_this.currentOpenValue=open;}});_defineProperty(_assertThisInitialized(_this),\"toggleStatusBar\",function(hidden){var _this$props2=_this.props,hideStatusBar=_this$props2.hideStatusBar,statusBarAnimation=_this$props2.statusBarAnimation;if(hideStatusBar&&_this.isStatusBarHidden!==hidden){_this.isStatusBarHidden=hidden;StatusBar.setHidden(hidden,statusBarAnimation);}});return _this;}_createClass(DrawerView,[{key:\"componentDidMount\",value:function componentDidMount(){if(Platform.OS==='web'){var _document,_document$body,_document$body$addEve;(_document=document)===null||_document===void 0?void 0:(_document$body=_document.body)===null||_document$body===void 0?void 0:(_document$body$addEve=_document$body.addEventListener)===null||_document$body$addEve===void 0?void 0:_document$body$addEve.call(_document$body,'keyup',this.handleEscape);}}},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps){var _this$props3=this.props,open=_this$props3.open,drawerPosition=_this$props3.drawerPosition,drawerType=_this$props3.drawerType,gestureEnabled=_this$props3.gestureEnabled,swipeDistanceThreshold=_this$props3.swipeDistanceThreshold,swipeVelocityThreshold=_this$props3.swipeVelocityThreshold,hideStatusBar=_this$props3.hideStatusBar;if(prevProps.gestureEnabled!==gestureEnabled){this.isGestureEnabled.setValue(gestureEnabled?TRUE:FALSE);}if(typeof this.pendingOpenValue!=='boolean'||open!==this.pendingOpenValue){this.toggleDrawer(open);}this.pendingOpenValue=undefined;if(open!==prevProps.open&&hideStatusBar){this.toggleStatusBar(open);}if(prevProps.drawerPosition!==drawerPosition){this.drawerPosition.setValue(drawerPosition==='right'?DIRECTION_RIGHT:DIRECTION_LEFT);}if(prevProps.drawerType!==drawerType){this.isDrawerTypeFront.setValue(drawerType==='front'?TRUE:FALSE);}if(prevProps.swipeDistanceThreshold!==swipeDistanceThreshold){this.swipeDistanceThreshold.setValue(swipeDistanceThreshold!==undefined?swipeDistanceThreshold:SWIPE_DISTANCE_THRESHOLD_DEFAULT);}if(prevProps.swipeVelocityThreshold!==swipeVelocityThreshold){this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);}}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this.toggleStatusBar(false);this.handleEndInteraction();if(Platform.OS==='web'){var _document2,_document2$body,_document2$body$remov;(_document2=document)===null||_document2===void 0?void 0:(_document2$body=_document2.body)===null||_document2$body===void 0?void 0:(_document2$body$remov=_document2$body.removeEventListener)===null||_document2$body$remov===void 0?void 0:_document2$body$remov.call(_document2$body,'keyup',this.handleEscape);}}},{key:\"render\",value:function render(){var _this2=this;var _this$props4=this.props,open=_this$props4.open,gestureEnabled=_this$props4.gestureEnabled,drawerPosition=_this$props4.drawerPosition,drawerType=_this$props4.drawerType,swipeEdgeWidth=_this$props4.swipeEdgeWidth,sceneContainerStyle=_this$props4.sceneContainerStyle,drawerStyle=_this$props4.drawerStyle,overlayStyle=_this$props4.overlayStyle,onGestureRef=_this$props4.onGestureRef,renderDrawerContent=_this$props4.renderDrawerContent,renderSceneContent=_this$props4.renderSceneContent,gestureHandlerProps=_this$props4.gestureHandlerProps;var isOpen=drawerType==='permanent'?true:open;var isRight=drawerPosition==='right';var contentTranslateX=drawerType==='front'?0:this.translateX;var drawerTranslateX=drawerType==='back'?I18nManager.isRTL?multiply(sub(this.containerWidth,this.drawerWidth),isRight?1:-1):0:this.translateX;var offset=drawerType==='back'?0:I18nManager.isRTL?'100%':multiply(this.drawerWidth,-1);var hitSlop=isRight?{right:0,width:isOpen?undefined:swipeEdgeWidth}:{left:0,width:isOpen?undefined:swipeEdgeWidth};var progress=drawerType==='permanent'?ANIMATED_ONE:this.progress;return React.createElement(PanGestureHandler,_extends({ref:onGestureRef,activeOffsetX:[-SWIPE_DISTANCE_MINIMUM,SWIPE_DISTANCE_MINIMUM],failOffsetY:[-SWIPE_DISTANCE_MINIMUM,SWIPE_DISTANCE_MINIMUM],onGestureEvent:this.handleGestureEvent,onHandlerStateChange:this.handleGestureStateChange,hitSlop:hitSlop,enabled:drawerType!=='permanent'&&gestureEnabled},gestureHandlerProps),React.createElement(Animated.View,{onLayout:this.handleContainerLayout,style:[styles.main,{flexDirection:drawerType==='permanent'&&!isRight?'row-reverse':'row'}]},React.createElement(Animated.View,{style:[styles.content,drawerType!=='permanent'&&{transform:[{translateX:contentTranslateX}]},sceneContainerStyle]},React.createElement(View,{accessibilityElementsHidden:isOpen,importantForAccessibility:isOpen?'no-hide-descendants':'auto',style:styles.content},renderSceneContent({progress:progress})),drawerType==='permanent'?null:React.createElement(TapGestureHandler,{enabled:gestureEnabled,onHandlerStateChange:this.handleTapStateChange},React.createElement(Overlay,{progress:progress,style:overlayStyle}))),drawerType==='permanent'?null:React.createElement(Animated.Code,{exec:block([onChange(this.manuallyTriggerSpring,[cond(eq(this.manuallyTriggerSpring,TRUE),[set(this.nextIsOpen,FALSE),call([],function(){return _this2.currentOpenValue=false;})])])])}),React.createElement(Animated.View,{accessibilityViewIsModal:isOpen,removeClippedSubviews:Platform.OS!=='ios',onLayout:this.handleDrawerLayout,style:[styles.container,drawerType==='permanent'?isRight?{right:0}:{left:0}:[styles.nonPermanent,{transform:[{translateX:drawerTranslateX}],opacity:this.drawerOpacity},isRight?{right:offset}:{left:offset},{zIndex:drawerType==='back'?-1:0}],drawerStyle]},renderDrawerContent({progress:progress}))));}}]);return DrawerView;}(React.PureComponent);export{DrawerView as default};_defineProperty(DrawerView,\"defaultProps\",{drawerPostion:I18nManager.isRTL?'left':'right',drawerType:'front',gestureEnabled:shouldEnableGesture(),swipeEdgeWidth:32,swipeVelocityThreshold:500,keyboardDismissMode:'on-drag',hideStatusBar:false,statusBarAnimation:'slide'});var styles=StyleSheet.create({container:{backgroundColor:'white',maxWidth:'100%'},nonPermanent:{position:'absolute',top:0,bottom:0,width:'80%'},content:{flex:1},main:{flex:1,overflow:'hidden'}});","map":{"version":3,"sources":["Drawer.tsx"],"names":["sub","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_THRESHOLD_DEFAULT","SWIPE_DISTANCE_MINIMUM","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","ANIMATED_ONE","Animated","Platform","isWebAppleDevice","navigator","window","DrawerView","React","drawerPostion","I18nManager","drawerType","gestureEnabled","shouldEnableGesture","swipeEdgeWidth","swipeVelocityThreshold","keyboardDismissMode","hideStatusBar","statusBarAnimation","prevProps","open","drawerPosition","swipeDistanceThreshold","e","onClose","InteractionManager","State","cond","eq","max","min","multiply","isOpen","toValue","frameTime","state","position","time","finished","velocity","block","clockRunning","set","startClock","call","spring","stopClock","Boolean","onChange","neq","value","Keyboard","add","or","and","greaterThan","abs","lessThan","divide","event","nativeEvent","x","translationX","velocityX","s","oldState","requestAnimationFrame","hidden","StatusBar","gestureHandlerProps","isRight","contentTranslateX","drawerTranslateX","offset","hitSlop","right","width","left","progress","styles","flexDirection","transform","translateX","content","renderSceneContent","handleTapStateChange","overlayStyle","opacity","drawerOpacity","zIndex","renderDrawerContent","container","backgroundColor","maxWidth","nonPermanent","top","bottom","flex","main","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  ViewStyle,\n  LayoutChangeEvent,\n  I18nManager,\n  Platform,\n  Keyboard,\n  StatusBar,\n  StyleProp,\n  View,\n  InteractionManager,\n} from 'react-native';\nimport {\n  PanGestureHandler,\n  TapGestureHandler,\n  State,\n} from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nimport Overlay from './Overlay';\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;\n\nconst SWIPE_DISTANCE_MINIMUM = 5;\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\nconst ANIMATED_ONE = new Animated.Value(1);\n\ntype Binary = 0 | 1;\n\ntype Renderer = (props: { progress: Animated.Node<number> }) => React.ReactNode;\n\ntype Props = {\n  open: boolean;\n  onOpen: () => void;\n  onClose: () => void;\n  onGestureRef?: (ref: PanGestureHandler | null) => void;\n  gestureEnabled: boolean;\n  drawerPosition: 'left' | 'right';\n  drawerType: 'front' | 'back' | 'slide' | 'permanent';\n  keyboardDismissMode: 'none' | 'on-drag';\n  swipeEdgeWidth: number;\n  swipeDistanceThreshold?: number;\n  swipeVelocityThreshold: number;\n  hideStatusBar: boolean;\n  statusBarAnimation: 'slide' | 'none' | 'fade';\n  overlayStyle?: StyleProp<ViewStyle>;\n  drawerStyle?: StyleProp<ViewStyle>;\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n  renderDrawerContent: Renderer;\n  renderSceneContent: Renderer;\n  gestureHandlerProps?: React.ComponentProps<typeof PanGestureHandler>;\n};\n\n/**\n * Disables the pan gesture by default on Apple devices in the browser.\n * https://stackoverflow.com/a/9039885\n */\nfunction shouldEnableGesture(): boolean {\n  if (\n    Platform.OS === 'web' &&\n    typeof navigator !== 'undefined' &&\n    typeof window !== 'undefined'\n  ) {\n    const isWebAppleDevice =\n      /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n\n    return !isWebAppleDevice;\n  }\n\n  return true;\n}\n\nexport default class DrawerView extends React.PureComponent<Props> {\n  static defaultProps = {\n    drawerPostion: I18nManager.isRTL ? 'left' : 'right',\n    drawerType: 'front',\n    gestureEnabled: shouldEnableGesture(),\n    swipeEdgeWidth: 32,\n    swipeVelocityThreshold: 500,\n    keyboardDismissMode: 'on-drag',\n    hideStatusBar: false,\n    statusBarAnimation: 'slide',\n  };\n\n  componentDidMount() {\n    if (Platform.OS === 'web') {\n      document?.body?.addEventListener?.('keyup', this.handleEscape);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      gestureEnabled,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBar,\n    } = this.props;\n\n    if (prevProps.gestureEnabled !== gestureEnabled) {\n      this.isGestureEnabled.setValue(gestureEnabled ? TRUE : FALSE);\n    }\n\n    if (\n      // If we're not in the middle of a transition, sync the drawer's open state\n      typeof this.pendingOpenValue !== 'boolean' ||\n      open !== this.pendingOpenValue\n    ) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n      );\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(\n        swipeDistanceThreshold !== undefined\n          ? swipeDistanceThreshold\n          : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n      );\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n    this.handleEndInteraction();\n\n    if (Platform.OS === 'web') {\n      document?.body?.removeEventListener?.('keyup', this.handleEscape);\n    }\n  }\n\n  private handleEscape = (e: KeyboardEvent) => {\n    const { open, onClose } = this.props;\n\n    if (e.key === 'Escape') {\n      if (open) {\n        onClose();\n      }\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private clock = new Clock();\n  private interactionHandle: number | undefined;\n\n  private isDrawerTypeFront = new Value<Binary>(\n    this.props.drawerType === 'front' ? TRUE : FALSE\n  );\n  private isGestureEnabled = new Value(\n    this.props.gestureEnabled ? TRUE : FALSE\n  );\n\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\n  private isSwiping = new Value<Binary>(FALSE);\n\n  private gestureState = new Value<number>(State.UNDETERMINED);\n  private touchX = new Value<number>(0);\n  private velocityX = new Value<number>(0);\n  private gestureX = new Value<number>(0);\n  private offsetX = new Value<number>(0);\n  private position = new Value<number>(0);\n\n  private containerWidth = new Value<number>(0);\n  private drawerWidth = new Value<number>(0);\n  private drawerOpacity = new Value<number>(0);\n  private drawerPosition = new Value<number>(\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n  );\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  private touchDistanceFromDrawer = cond(\n    this.isDrawerTypeFront,\n    cond(\n      eq(this.drawerPosition, DIRECTION_LEFT),\n      max(\n        // Distance of touch start from left screen edge - Drawer width\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\n        0\n      ),\n      min(\n        multiply(\n          // Distance of drawer from left screen edge - Touch start point\n          sub(\n            sub(this.containerWidth, this.drawerWidth),\n            sub(this.touchX, this.gestureX)\n          ),\n          DIRECTION_RIGHT\n        ),\n        0\n      )\n    ),\n    0\n  );\n\n  private swipeDistanceThreshold = new Value<number>(\n    this.props.swipeDistanceThreshold !== undefined\n      ? this.props.swipeDistanceThreshold\n      : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n  );\n  private swipeVelocityThreshold = new Value<number>(\n    this.props.swipeVelocityThreshold\n  );\n\n  private currentOpenValue: boolean = this.props.open;\n  private pendingOpenValue: boolean | undefined;\n\n  private isStatusBarHidden: boolean = false;\n\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\n\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(state.velocity, this.velocityX),\n        set(this.isOpen, isOpen),\n        startClock(this.clock),\n        call([], this.handleStartInteraction),\n        set(this.manuallyTriggerSpring, FALSE),\n      ]),\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\n      cond(state.finished, [\n        // Reset gesture and velocity from previous gesture\n        set(this.touchX, 0),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        set(this.offsetX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isOpen], ([value]: readonly Binary[]) => {\n          const open = Boolean(value);\n          this.handleEndInteraction();\n\n          if (open !== this.props.open) {\n            // Sync drawer's state after animation finished\n            // This shouldn't be necessary, but there seems to be an issue on iOS\n            this.toggleDrawer(this.props.open);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private dragX = block([\n    onChange(\n      this.isOpen,\n      call([this.isOpen], ([value]: readonly Binary[]) => {\n        const open = Boolean(value);\n\n        this.currentOpenValue = open;\n\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n        if (open !== this.props.open) {\n          // If the mode changed, update state\n          if (open) {\n            this.props.onOpen();\n          } else {\n            this.props.onClose();\n          }\n\n          this.pendingOpenValue = open;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.nextIsOpen,\n      cond(neq(this.nextIsOpen, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        // Update the open value to trigger the transition\n        set(this.isOpen, this.nextIsOpen),\n        set(this.gestureX, 0),\n        set(this.nextIsOpen, UNSET),\n      ])\n    ),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: readonly Binary[]) => {\n        const { keyboardDismissMode } = this.props;\n\n        if (value === TRUE) {\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n\n          this.toggleStatusBar(true);\n        } else {\n          this.toggleStatusBar(this.currentOpenValue);\n        }\n      })\n    ),\n    onChange(\n      this.gestureState,\n      cond(\n        eq(this.gestureState, State.ACTIVE),\n        call([], this.handleStartInteraction)\n      )\n    ),\n    cond(\n      eq(this.gestureState, State.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          // Also update the drag offset to the last position\n          set(this.offsetX, this.position),\n        ]),\n        // Update position with previous offset + gesture distance\n        set(\n          this.position,\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.touchX, 0),\n        this.transitionTo(\n          cond(\n            this.manuallyTriggerSpring,\n            this.isOpen,\n            cond(\n              or(\n                and(\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\n                ),\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\n              ),\n              cond(\n                eq(this.drawerPosition, DIRECTION_LEFT),\n                // If swiped to right, open the drawer, otherwise close it\n                greaterThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                ),\n                // If swiped to left, open the drawer, otherwise close it\n                lessThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                )\n              ),\n              this.isOpen\n            )\n          )\n        ),\n      ]\n    ),\n    this.position,\n  ]);\n\n  private translateX = cond(\n    eq(this.drawerPosition, DIRECTION_RIGHT),\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\n    max(min(this.drawerWidth, this.dragX), 0)\n  );\n\n  private progress = cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0),\n    0,\n    abs(divide(this.translateX, this.drawerWidth))\n  );\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n      },\n    },\n  ]);\n\n  private handleGestureStateChange = event([\n    {\n      nativeEvent: {\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\n      },\n    },\n  ]);\n\n  private handleTapStateChange = event([\n    {\n      nativeEvent: {\n        oldState: (s: Animated.Value<number>) =>\n          cond(eq(s, State.ACTIVE), set(this.manuallyTriggerSpring, TRUE)),\n      },\n    },\n  ]);\n\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\n\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() =>\n      requestAnimationFrame(() => this.drawerOpacity.setValue(1))\n    );\n  };\n\n  private toggleDrawer = (open: boolean) => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n\n  private toggleStatusBar = (hidden: boolean) => {\n    const { hideStatusBar, statusBarAnimation } = this.props;\n\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n\n  render() {\n    const {\n      open,\n      gestureEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      sceneContainerStyle,\n      drawerStyle,\n      overlayStyle,\n      onGestureRef,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps,\n    } = this.props;\n\n    const isOpen = drawerType === 'permanent' ? true : open;\n    const isRight = drawerPosition === 'right';\n\n    const contentTranslateX = drawerType === 'front' ? 0 : this.translateX;\n    const drawerTranslateX =\n      drawerType === 'back'\n        ? I18nManager.isRTL\n          ? multiply(\n              sub(this.containerWidth, this.drawerWidth),\n              isRight ? 1 : -1\n            )\n          : 0\n        : this.translateX;\n\n    const offset =\n      drawerType === 'back'\n        ? 0\n        : I18nManager.isRTL\n        ? '100%'\n        : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/kmagiera/react-native-gesture-handler/issues/569\n    const hitSlop = isRight\n      ? // Extend hitSlop to the side of the screen when drawer is closed\n        // This lets the user drag the drawer from the side of the screen\n        { right: 0, width: isOpen ? undefined : swipeEdgeWidth }\n      : { left: 0, width: isOpen ? undefined : swipeEdgeWidth };\n\n    const progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n\n    return (\n      <PanGestureHandler\n        ref={onGestureRef}\n        activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        onGestureEvent={this.handleGestureEvent}\n        onHandlerStateChange={this.handleGestureStateChange}\n        hitSlop={hitSlop}\n        enabled={drawerType !== 'permanent' && gestureEnabled}\n        {...gestureHandlerProps}\n      >\n        <Animated.View\n          onLayout={this.handleContainerLayout}\n          style={[\n            styles.main,\n            {\n              flexDirection:\n                drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row',\n            },\n          ]}\n        >\n          <Animated.View\n            style={[\n              styles.content,\n              drawerType !== 'permanent' && {\n                transform: [{ translateX: contentTranslateX }],\n              },\n              sceneContainerStyle as any,\n            ]}\n          >\n            <View\n              accessibilityElementsHidden={isOpen}\n              importantForAccessibility={\n                isOpen ? 'no-hide-descendants' : 'auto'\n              }\n              style={styles.content}\n            >\n              {renderSceneContent({ progress })}\n            </View>\n            {// Disable overlay if sidebar is permanent\n            drawerType === 'permanent' ? null : (\n              <TapGestureHandler\n                enabled={gestureEnabled}\n                onHandlerStateChange={this.handleTapStateChange}\n              >\n                <Overlay progress={progress} style={overlayStyle} />\n              </TapGestureHandler>\n            )}\n          </Animated.View>\n          {drawerType === 'permanent' ? null : (\n            <Animated.Code\n              exec={block([\n                onChange(this.manuallyTriggerSpring, [\n                  cond(eq(this.manuallyTriggerSpring, TRUE), [\n                    set(this.nextIsOpen, FALSE),\n                    call([], () => (this.currentOpenValue = false)),\n                  ]),\n                ]),\n              ])}\n            />\n          )}\n          <Animated.View\n            accessibilityViewIsModal={isOpen}\n            removeClippedSubviews={Platform.OS !== 'ios'}\n            onLayout={this.handleDrawerLayout}\n            style={[\n              styles.container,\n              drawerType === 'permanent'\n                ? // Without this, the `left`/`right` values don't get reset\n                  isRight\n                  ? { right: 0 }\n                  : { left: 0 }\n                : [\n                    styles.nonPermanent,\n                    {\n                      transform: [{ translateX: drawerTranslateX }],\n                      opacity: this.drawerOpacity,\n                    },\n                    isRight ? { right: offset } : { left: offset },\n                    { zIndex: drawerType === 'back' ? -1 : 0 },\n                  ],\n              drawerStyle as any,\n            ]}\n          >\n            {renderDrawerContent({ progress })}\n          </Animated.View>\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%',\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: '80%',\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}